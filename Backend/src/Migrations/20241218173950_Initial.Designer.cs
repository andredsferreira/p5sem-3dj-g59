// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241218173950_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OperationRequestId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SurgeryRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OperationRequestId");

                    b.HasIndex("SurgeryRoomId");

                    b.ToTable("Appointment", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abe62c1d-5006-4b81-9e7a-bd976fe0d7ae"),
                            AppointmentStatus = "Scheduled",
                            DateTime = "28/10/2024 10:30:00",
                            OperationRequestId = new Guid("320eb07c-0865-43b0-b28e-4ce609177139"),
                            SurgeryRoomId = "82ce05ce-56ab-4d26-805d-bd5af5eb3763"
                        },
                        new
                        {
                            Id = new Guid("02185caa-870b-46b4-a422-ed44f46182cd"),
                            AppointmentStatus = "Scheduled",
                            DateTime = "28/10/2024 18:30:00",
                            OperationRequestId = new Guid("60d8f43d-c793-4a9d-96b0-26a1f5064da1"),
                            SurgeryRoomId = "791f487e-a291-4200-b90e-41d8044afeb7"
                        });
                });

            modelBuilder.Entity("Backend.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("requestStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("320eb07c-0865-43b0-b28e-4ce609177139"),
                            dateTime = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("bf338c12-bdce-4ff7-a349-9ca6c32f8a28"),
                            patientId = "6e3fe5db-0fcd-4690-9523-35e5b2e45c55",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "94f0a26f-293d-4d47-a798-b43209ae7425"
                        },
                        new
                        {
                            Id = new Guid("60d8f43d-c793-4a9d-96b0-26a1f5064da1"),
                            dateTime = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("d7035d06-46b8-4c33-8c1a-b79c1362f127"),
                            patientId = "1610319e-ba58-4191-b041-d73c7af03128",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "94f0a26f-293d-4d47-a798-b43209ae7425"
                        },
                        new
                        {
                            Id = new Guid("b3d1aa0b-69c7-4efc-a046-6b856ba00e5b"),
                            dateTime = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b87ff508-e3a2-42e3-9dca-939393cb39d7"),
                            patientId = "46854854-0140-4e05-8732-9567c613d6c9",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "94f0a26f-293d-4d47-a798-b43209ae7425"
                        },
                        new
                        {
                            Id = new Guid("ef5e68ae-2def-4ff7-a3ad-bbee6c57ed82"),
                            dateTime = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("169f3d9b-923a-4852-824b-24e828cc0594"),
                            patientId = "b01d0ec2-c30b-463d-b533-b3ecce66ae22",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "94f0a26f-293d-4d47-a798-b43209ae7425"
                        },
                        new
                        {
                            Id = new Guid("0a4cf163-1e20-4294-9276-3d0d8265d195"),
                            dateTime = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("c9b2f3fb-c5ed-49d1-8824-982a8bab2d21"),
                            patientId = "fdee3798-b3e4-4422-a84e-8775c8020f2d",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "94f0a26f-293d-4d47-a798-b43209ae7425"
                        },
                        new
                        {
                            Id = new Guid("df860ac9-7e05-4b03-a158-45a0766b0b98"),
                            dateTime = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("cac81324-91c2-4920-b930-fb934f97a637"),
                            patientId = "c3072c2d-5bf7-4812-8c13-49628faeab55",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "94f0a26f-293d-4d47-a798-b43209ae7425"
                        },
                        new
                        {
                            Id = new Guid("2da4eed8-6f8b-49b2-bf6f-15c383a1994a"),
                            dateTime = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("c9b2f3fb-c5ed-49d1-8824-982a8bab2d21"),
                            patientId = "341730b5-98a9-4292-a9c8-2d36e4fcf281",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "bb115771-b20b-45ee-b3c0-05718803bd3c"
                        },
                        new
                        {
                            Id = new Guid("142f9bb0-f7db-4784-b819-54e2cc197e34"),
                            dateTime = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("1fb72761-579f-4af9-87b5-37f7115b8280"),
                            patientId = "c3072c2d-5bf7-4812-8c13-49628faeab55",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "bb115771-b20b-45ee-b3c0-05718803bd3c"
                        },
                        new
                        {
                            Id = new Guid("961ffc01-1d47-44ae-895c-d84b9e386d24"),
                            dateTime = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("cac81324-91c2-4920-b930-fb934f97a637"),
                            patientId = "4a9a767e-68b9-4a04-8687-96b62d6fe855",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "bb115771-b20b-45ee-b3c0-05718803bd3c"
                        },
                        new
                        {
                            Id = new Guid("e11f5835-deaa-4a33-bab4-aaa588e15eb8"),
                            dateTime = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("09e86063-d8ea-4821-b4cf-430d3a1c5c3c"),
                            patientId = "cd047d2d-b1e9-42bb-905a-de0f1b85b608",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "bb115771-b20b-45ee-b3c0-05718803bd3c"
                        },
                        new
                        {
                            Id = new Guid("d3ca1b20-06be-4e65-9ee0-614cff9e23ae"),
                            dateTime = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("1859092d-58a5-4be8-90fc-2a367ab8e1eb"),
                            patientId = "3e5b384e-361d-4212-a5d6-6a9d9eec505c",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "bb115771-b20b-45ee-b3c0-05718803bd3c"
                        },
                        new
                        {
                            Id = new Guid("b805f725-e817-4fb7-a691-11467eb500e2"),
                            dateTime = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("1859092d-58a5-4be8-90fc-2a367ab8e1eb"),
                            patientId = "3e5b384e-361d-4212-a5d6-6a9d9eec505c",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "cabfe637-4f71-4a76-a8f1-0065fe1919a3"
                        },
                        new
                        {
                            Id = new Guid("b4d24e85-d59d-487c-a99d-5067e638cb94"),
                            dateTime = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("3b515d9f-ad76-4bd0-8e4e-b264ddbe8631"),
                            patientId = "2f64617b-38e3-46d3-83b6-d4a28e90f6fc",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "cabfe637-4f71-4a76-a8f1-0065fe1919a3"
                        },
                        new
                        {
                            Id = new Guid("7c64540a-0208-419d-80b2-73b3a9543f13"),
                            dateTime = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("bf338c12-bdce-4ff7-a349-9ca6c32f8a28"),
                            patientId = "0dffb78a-0d61-400f-acf8-9c8404834d1e",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "cabfe637-4f71-4a76-a8f1-0065fe1919a3"
                        },
                        new
                        {
                            Id = new Guid("f3a302d2-92fc-4723-9471-6387cfe28617"),
                            dateTime = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("d7035d06-46b8-4c33-8c1a-b79c1362f127"),
                            patientId = "54e8888f-0b4e-4e88-951e-74f1b24743e2",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "cabfe637-4f71-4a76-a8f1-0065fe1919a3"
                        },
                        new
                        {
                            Id = new Guid("e2f1ff93-9487-4d36-a4d9-197594b0a77e"),
                            dateTime = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b87ff508-e3a2-42e3-9dca-939393cb39d7"),
                            patientId = "fdee3798-b3e4-4422-a84e-8775c8020f2d",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "cabfe637-4f71-4a76-a8f1-0065fe1919a3"
                        },
                        new
                        {
                            Id = new Guid("9daedf05-8280-4e6f-9a84-74a980a6b6df"),
                            dateTime = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("169f3d9b-923a-4852-824b-24e828cc0594"),
                            patientId = "6e3fe5db-0fcd-4690-9523-35e5b2e45c55",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "cabfe637-4f71-4a76-a8f1-0065fe1919a3"
                        });
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinAnesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinCirculatingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinDoctor")
                        .HasColumnType("int");

                    b.Property<int>("MinInstrumentingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinMedicalActionAssistant")
                        .HasColumnType("int");

                    b.Property<int>("MinNurseAnaesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinXRayTechnician")
                        .HasColumnType("int");

                    b.Property<Guid?>("SpecializationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf338c12-bdce-4ff7-a349-9ca6c32f8a28"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 30,
                            name = "ACL reconstruction",
                            surgeryTime = 60
                        },
                        new
                        {
                            Id = new Guid("d7035d06-46b8-4c33-8c1a-b79c1362f127"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Knee replacement",
                            surgeryTime = 60
                        },
                        new
                        {
                            Id = new Guid("b87ff508-e3a2-42e3-9dca-939393cb39d7"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Shoulder replacement",
                            surgeryTime = 90
                        },
                        new
                        {
                            Id = new Guid("169f3d9b-923a-4852-824b-24e828cc0594"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Hip replacement",
                            surgeryTime = 75
                        },
                        new
                        {
                            Id = new Guid("c9b2f3fb-c5ed-49d1-8824-982a8bab2d21"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 20,
                            name = "Meniscal inury treatment",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("1fb72761-579f-4af9-87b5-37f7115b8280"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 30,
                            name = "Rotator cuff repair",
                            surgeryTime = 80
                        },
                        new
                        {
                            Id = new Guid("cac81324-91c2-4920-b930-fb934f97a637"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 30,
                            cleaningTime = 20,
                            name = "Ankle ligaments repair",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("09e86063-d8ea-4821-b4cf-430d3a1c5c3c"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 20,
                            cleaningTime = 15,
                            name = "Lumbar disectomy",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("1859092d-58a5-4be8-90fc-2a367ab8e1eb"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 15,
                            cleaningTime = 15,
                            name = "Trigger finger",
                            surgeryTime = 10
                        },
                        new
                        {
                            Id = new Guid("3b515d9f-ad76-4bd0-8e4e-b264ddbe8631"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 15,
                            cleaningTime = 15,
                            name = "Carpal tunnel syndrome",
                            surgeryTime = 10
                        });
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "6e3fe5db-0fcd-4690-9523-35e5b2e45c55",
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111",
                            UserEmail = "patientA@hospital.com"
                        },
                        new
                        {
                            Id = "1610319e-ba58-4191-b041-d73c7af03128",
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222",
                            UserEmail = "patientB@hospital.com"
                        },
                        new
                        {
                            Id = "46854854-0140-4e05-8732-9567c613d6c9",
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333",
                            UserEmail = "patientC@hospital.com"
                        },
                        new
                        {
                            Id = "b01d0ec2-c30b-463d-b533-b3ecce66ae22",
                            DateOfBirth = new DateOnly(1988, 5, 14),
                            Email = "patientD@hospital.com",
                            FullName = "David Oliveira",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000004",
                            PhoneNumber = "910555334",
                            UserEmail = "patientD@hospital.com"
                        },
                        new
                        {
                            Id = "341730b5-98a9-4292-a9c8-2d36e4fcf281",
                            DateOfBirth = new DateOnly(1992, 8, 22),
                            Email = "patientE@hospital.com",
                            FullName = "Emma Sousa",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000005",
                            PhoneNumber = "910555335",
                            UserEmail = "patientE@hospital.com"
                        },
                        new
                        {
                            Id = "c3072c2d-5bf7-4812-8c13-49628faeab55",
                            DateOfBirth = new DateOnly(1985, 3, 10),
                            Email = "patientF@hospital.com",
                            FullName = "Felipe Costa",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000006",
                            PhoneNumber = "910555336",
                            UserEmail = "patientF@hospital.com"
                        },
                        new
                        {
                            Id = "4a9a767e-68b9-4a04-8687-96b62d6fe855",
                            DateOfBirth = new DateOnly(2000, 11, 2),
                            Email = "patientG@hospital.com",
                            FullName = "Gabriela Santos",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000007",
                            PhoneNumber = "910555337",
                            UserEmail = "patientG@hospital.com"
                        },
                        new
                        {
                            Id = "cd047d2d-b1e9-42bb-905a-de0f1b85b608",
                            DateOfBirth = new DateOnly(1990, 7, 19),
                            Email = "patientH@hospital.com",
                            FullName = "Henrique Almeida",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000008",
                            PhoneNumber = "910555338",
                            UserEmail = "patientH@hospital.com"
                        },
                        new
                        {
                            Id = "3e5b384e-361d-4212-a5d6-6a9d9eec505c",
                            DateOfBirth = new DateOnly(1994, 1, 15),
                            Email = "patientI@hospital.com",
                            FullName = "Isabel Pereira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000009",
                            PhoneNumber = "910555339",
                            UserEmail = "patientI@hospital.com"
                        },
                        new
                        {
                            Id = "2f64617b-38e3-46d3-83b6-d4a28e90f6fc",
                            DateOfBirth = new DateOnly(1982, 6, 8),
                            Email = "patientJ@hospital.com",
                            FullName = "João Lima",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000010",
                            PhoneNumber = "910555340",
                            UserEmail = "patientJ@hospital.com"
                        },
                        new
                        {
                            Id = "0dffb78a-0d61-400f-acf8-9c8404834d1e",
                            DateOfBirth = new DateOnly(1996, 9, 25),
                            Email = "patientK@hospital.com",
                            FullName = "Karina Martins",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000011",
                            PhoneNumber = "910555341",
                            UserEmail = "patientK@hospital.com"
                        },
                        new
                        {
                            Id = "54e8888f-0b4e-4e88-951e-74f1b24743e2",
                            DateOfBirth = new DateOnly(1987, 4, 12),
                            Email = "patientL@hospital.com",
                            FullName = "Lucas Rodrigues",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000012",
                            PhoneNumber = "910555342",
                            UserEmail = "patientL@hospital.com"
                        },
                        new
                        {
                            Id = "fdee3798-b3e4-4422-a84e-8775c8020f2d",
                            DateOfBirth = new DateOnly(1993, 12, 5),
                            Email = "patientM@hospital.com",
                            FullName = "Marta Silva",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000013",
                            PhoneNumber = "910555343",
                            UserEmail = "patientM@hospital.com"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Specializations.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("codeSpec")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("designation")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("codeSpec")
                        .IsUnique();

                    b.HasIndex("designation")
                        .IsUnique();

                    b.ToTable("Specialization", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("86827cff-5d15-4a38-bd99-36acb888580e"),
                            codeSpec = "PRO",
                            description = "Prosthetics",
                            designation = "Prosthethiscs"
                        },
                        new
                        {
                            Id = new Guid("cac82333-7379-4bc5-9efb-03a7387a1d30"),
                            codeSpec = "ART",
                            description = "Arthroscopy",
                            designation = "Arthroscopy"
                        },
                        new
                        {
                            Id = new Guid("dc97edfd-229d-4632-a053-da2853f7eeae"),
                            codeSpec = "SPN",
                            description = "Spine",
                            designation = "Spine"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StaffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "94f0a26f-293d-4d47-a798-b43209ae7425",
                            Email = "pedro@hospital.com",
                            FullName = "Pedro Carvalho Oliveira Monteiro",
                            IdentityUsername = "pedro",
                            LicenseNumber = "f47ac10b-08cc-4372-a507-0e02b2d3d479",
                            PhoneNumber = "910555111",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "bb115771-b20b-45ee-b3c0-05718803bd3c",
                            Email = "andre@hospital.com",
                            FullName = "André de Sousa Ferreira",
                            IdentityUsername = "andre",
                            LicenseNumber = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PhoneNumber = "920555222",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "cabfe637-4f71-4a76-a8f1-0065fe1919a3",
                            Email = "tiago@hospital.com",
                            FullName = "Tiago Filipe Carvalho Nunes",
                            IdentityUsername = "tiago",
                            LicenseNumber = "f57ac10b-68cc-5372-a567-1e02b2c3d479",
                            PhoneNumber = "930555333",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "40eb7cf5-f5f5-4fda-b324-7a8790b9f2c0",
                            Email = "nurse@hospital.com",
                            FullName = "Nurse One",
                            IdentityUsername = "nurse",
                            LicenseNumber = "n47ac10b-58cc-4372-a567-0e02b2c3d481",
                            PhoneNumber = "910555567",
                            StaffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedEquipment")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceSlots")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RoomStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("SurgeryRoom", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "82ce05ce-56ab-4d26-805d-bd5af5eb3763",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[09:30,10:00];\"]",
                            Number = 200,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        },
                        new
                        {
                            Id = "791f487e-a291-4200-b90e-41d8044afeb7",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\",\"Table\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[12:30,13:00];\"]",
                            Number = 201,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d85980f4-43b6-428f-af9c-e423ea6555ac",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fd3f89e0-c046-45a1-967d-5b330a5a5ab0",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "500e872f-eb2a-4a43-8b2c-8afdbec21d7a",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "729aaa37-7a19-4600-9d72-7f98a52e2f73",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "cbaffa3c-49cb-4c94-8318-65267bc23109",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e7e57f6f-dfca-4460-8ee3-dd286563f68a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de41460f-e2f6-4542-9b74-cac90a0a9c11",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECLlNRZ3XSNMRY8Pbz/691Qv4qRSbEsXjbg+K/dYakn8kuVGz1XSk2JPGNwYVOfYig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d20fb56f-51ed-4212-a898-21d10dbb02f3",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "56a39e87-da40-4af1-acbf-ea63e0ac9c5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffe63d9b-55c2-407e-8786-89286c36a877",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJkFmuIENrkNCd8NIRnEyKVFmsdeAU62Ag6dmdHPHxqpBRKTNK6BHTsnCZ6FhIcTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63b2596a-3f53-41ad-9a4c-292ce77939c6",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "978a18d2-dcca-4006-95ba-6c242028b9d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1bf5b886-561e-4a1b-9a92-380fd9179c22",
                            Email = "andre@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDRE@HOSPITAL.COM",
                            NormalizedUserName = "ANDRE",
                            PasswordHash = "AQAAAAIAAYagAAAAEBKcMz3P3phEy6+hJ2acSFpI/+CIWjn77/aH3uGnpIYTSaPzvEpejBNR3K1+Lf7GiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c3b4806-4195-4c47-a835-cc3df3720056",
                            TwoFactorEnabled = false,
                            UserName = "andre"
                        },
                        new
                        {
                            Id = "f8fa680e-0f58-4cde-8ac7-796d200197c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a001e182-7638-4876-97b2-f558dde1fa59",
                            Email = "tiago@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIAGO@HOSPITAL.COM",
                            NormalizedUserName = "TIAGO",
                            PasswordHash = "AQAAAAIAAYagAAAAEAa5ZeIQqSlj9c+OHYICfj0IYZlN37TSrP4kq+wjRpy0MT4XINmVuiWk2Lf/KIYBcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76d486d9-70f3-4353-8275-0946000f52e1",
                            TwoFactorEnabled = false,
                            UserName = "tiago"
                        },
                        new
                        {
                            Id = "49b4b520-025b-4e6e-8406-3ac69054b0cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16393a12-d26d-44a0-afd6-30f57eb565f2",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEKxXGot2FUtESUhN6jdmX3nr6X1iwHiWbYspP1+e3kJg3FPQamYZE4NrLHvN3IZQUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63bdd95a-d444-4246-b36c-376a1f56c903",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "33f583c9-6b7a-40d6-a5d5-b7c41cbb1ef8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "384a3dac-1b40-4f9a-ad9e-3587b376948f",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAKRayhb10s14x9Ynf6H2sdBYObDFKrVNXlmzq2gONkW5xYJRnlCtajNnkgWih9b8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fbde82a-7f9e-41da-9693-97fc4b2f6124",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "5fea4ba2-988e-4270-9dfb-47908a3a838f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a54721c-2afe-4223-9e63-309b59b9e7c9",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEL+e/uCda+O4Me5sRDIfIrCgc9pZrIJHsjPGoIkdgC+2MyqYg1pXO7KC4S9UjzdCMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3eb080dc-3f9b-4b98-8d81-5f1ea3e71261",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e7e57f6f-dfca-4460-8ee3-dd286563f68a",
                            RoleId = "d85980f4-43b6-428f-af9c-e423ea6555ac"
                        },
                        new
                        {
                            UserId = "56a39e87-da40-4af1-acbf-ea63e0ac9c5a",
                            RoleId = "fd3f89e0-c046-45a1-967d-5b330a5a5ab0"
                        },
                        new
                        {
                            UserId = "978a18d2-dcca-4006-95ba-6c242028b9d4",
                            RoleId = "fd3f89e0-c046-45a1-967d-5b330a5a5ab0"
                        },
                        new
                        {
                            UserId = "f8fa680e-0f58-4cde-8ac7-796d200197c6",
                            RoleId = "fd3f89e0-c046-45a1-967d-5b330a5a5ab0"
                        },
                        new
                        {
                            UserId = "49b4b520-025b-4e6e-8406-3ac69054b0cd",
                            RoleId = "500e872f-eb2a-4a43-8b2c-8afdbec21d7a"
                        },
                        new
                        {
                            UserId = "33f583c9-6b7a-40d6-a5d5-b7c41cbb1ef8",
                            RoleId = "729aaa37-7a19-4600-9d72-7f98a52e2f73"
                        },
                        new
                        {
                            UserId = "5fea4ba2-988e-4270-9dfb-47908a3a838f",
                            RoleId = "cbaffa3c-49cb-4c94-8318-65267bc23109"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("Backend.Domain.OperationRequests.OperationRequest", "OperationRequest")
                        .WithMany("Appointments")
                        .HasForeignKey("OperationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.SurgeryRooms.SurgeryRoom", "SurgeryRoom")
                        .WithMany("Appointments")
                        .HasForeignKey("SurgeryRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationRequest");

                    b.Navigation("SurgeryRoom");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("Backend.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.HasOne("Backend.Domain.Specializations.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("Backend.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
