// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OperationRequestId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SurgeryRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OperationRequestId");

                    b.HasIndex("SurgeryRoomId");

                    b.ToTable("Appointment", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("requestStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1faad16b-9f59-47bf-ae9c-fc114100c2e9"),
                            dateTime = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("fb1e5573-ad32-48c2-9cb4-abf797ab1a85"),
                            patientId = "b4b53ae2-a955-49ec-b3ae-64c1815a21b2",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "6fb2a606-da21-492d-8b39-8029af120969"
                        },
                        new
                        {
                            Id = new Guid("ee9932c4-07eb-40bd-81c3-491fcc4947bb"),
                            dateTime = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("4f5f94d2-44d4-49f3-8914-c73227bfd33e"),
                            patientId = "ea59fe7d-0430-4b61-ad8b-5fc88bc6ec5b",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "6fb2a606-da21-492d-8b39-8029af120969"
                        },
                        new
                        {
                            Id = new Guid("fde26376-d55c-4cde-b57b-357397ccab51"),
                            dateTime = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("07f3b1ab-059d-46a7-8f23-fc674e7a50a4"),
                            patientId = "d8f702ea-e750-4127-bcec-2eb0253658aa",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "6fb2a606-da21-492d-8b39-8029af120969"
                        },
                        new
                        {
                            Id = new Guid("88fa1e98-590b-4676-98be-65420006ca9d"),
                            dateTime = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("e426072b-82a6-4d2f-81ec-1485e639919b"),
                            patientId = "a3e82e41-0f2c-4c27-808f-55f556b36fe7",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "6fb2a606-da21-492d-8b39-8029af120969"
                        },
                        new
                        {
                            Id = new Guid("ceb27b8f-ba2a-40c7-9452-e9589f43db7b"),
                            dateTime = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("a1e7fe58-fc4c-4f01-9a27-0d4a9f454ec6"),
                            patientId = "a2633647-7446-4d74-ad00-e569582a6af3",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "6fb2a606-da21-492d-8b39-8029af120969"
                        },
                        new
                        {
                            Id = new Guid("1dbe35f1-54da-4d44-8cfb-6440a62f1646"),
                            dateTime = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("24bb231c-1c4a-4861-b7e7-2046cb9163a9"),
                            patientId = "db35b2d9-23eb-4ae8-9885-47c9bd284e13",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "6fb2a606-da21-492d-8b39-8029af120969"
                        },
                        new
                        {
                            Id = new Guid("49f755b2-229e-46e9-a34c-31bba6b81b05"),
                            dateTime = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("a1e7fe58-fc4c-4f01-9a27-0d4a9f454ec6"),
                            patientId = "efb29130-4e71-4531-8114-513784e5b258",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "2b2bde2a-a50d-45fd-8efe-89421e1b9654"
                        },
                        new
                        {
                            Id = new Guid("64dab865-564c-423c-b834-22476f9f88ad"),
                            dateTime = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("207be4a1-1af6-484f-a85b-71f102e04fb1"),
                            patientId = "db35b2d9-23eb-4ae8-9885-47c9bd284e13",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "2b2bde2a-a50d-45fd-8efe-89421e1b9654"
                        },
                        new
                        {
                            Id = new Guid("b6e130c5-61d2-452a-96de-d9837399e8f2"),
                            dateTime = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("24bb231c-1c4a-4861-b7e7-2046cb9163a9"),
                            patientId = "e3a8744f-1fad-489e-8d2f-8c53c9f6e248",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "2b2bde2a-a50d-45fd-8efe-89421e1b9654"
                        },
                        new
                        {
                            Id = new Guid("d2f41277-2b35-4c51-84fb-d000889f23bc"),
                            dateTime = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("af80b42b-ec82-48c9-8bf3-e9d55a79d275"),
                            patientId = "c63227e6-c822-44f7-9eee-17b8e4008480",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "2b2bde2a-a50d-45fd-8efe-89421e1b9654"
                        },
                        new
                        {
                            Id = new Guid("a94668a6-60ef-4b29-b45b-18ab196e3020"),
                            dateTime = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b967e430-4bf9-44f2-a812-49921e8699e5"),
                            patientId = "26b4d341-349c-417f-bc14-6aa880ecc9d9",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "2b2bde2a-a50d-45fd-8efe-89421e1b9654"
                        },
                        new
                        {
                            Id = new Guid("d8c9bd00-fffa-4f78-9fb0-db3b181a5639"),
                            dateTime = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b967e430-4bf9-44f2-a812-49921e8699e5"),
                            patientId = "26b4d341-349c-417f-bc14-6aa880ecc9d9",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "75c71629-c4d9-4519-9f5c-bfb38b5ce8fb"
                        },
                        new
                        {
                            Id = new Guid("a7c1e7bf-5194-42de-9975-90173fb0ac48"),
                            dateTime = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("5dec11bf-ab57-480e-a8ff-283098553cb5"),
                            patientId = "617c1764-6cec-4c17-a21f-e1b0c899d70c",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "75c71629-c4d9-4519-9f5c-bfb38b5ce8fb"
                        },
                        new
                        {
                            Id = new Guid("de8b8b36-b2ca-4798-9224-d8da1c607698"),
                            dateTime = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("fb1e5573-ad32-48c2-9cb4-abf797ab1a85"),
                            patientId = "3f2f6819-d22a-4148-bad5-770001f445ec",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "75c71629-c4d9-4519-9f5c-bfb38b5ce8fb"
                        },
                        new
                        {
                            Id = new Guid("d47c86b1-bf13-4466-a354-9abd52ce9a74"),
                            dateTime = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("4f5f94d2-44d4-49f3-8914-c73227bfd33e"),
                            patientId = "eb5cf5ad-ea08-4252-833b-a84d65ba650d",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "75c71629-c4d9-4519-9f5c-bfb38b5ce8fb"
                        },
                        new
                        {
                            Id = new Guid("5630e6f7-5672-498c-92c1-8ed8826e4d2c"),
                            dateTime = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("07f3b1ab-059d-46a7-8f23-fc674e7a50a4"),
                            patientId = "a2633647-7446-4d74-ad00-e569582a6af3",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "75c71629-c4d9-4519-9f5c-bfb38b5ce8fb"
                        },
                        new
                        {
                            Id = new Guid("beb3189f-dc2c-4649-9cb3-113a419c1d24"),
                            dateTime = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("e426072b-82a6-4d2f-81ec-1485e639919b"),
                            patientId = "b4b53ae2-a955-49ec-b3ae-64c1815a21b2",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "75c71629-c4d9-4519-9f5c-bfb38b5ce8fb"
                        });
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinAnesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinCirculatingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinDoctor")
                        .HasColumnType("int");

                    b.Property<int>("MinInstrumentingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinMedicalActionAssistant")
                        .HasColumnType("int");

                    b.Property<int>("MinNurseAnaesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinXRayTechnician")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb1e5573-ad32-48c2-9cb4-abf797ab1a85"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "ACL reconstruction",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("4f5f94d2-44d4-49f3-8914-c73227bfd33e"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Knee replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("07f3b1ab-059d-46a7-8f23-fc674e7a50a4"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Shoulder replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("e426072b-82a6-4d2f-81ec-1485e639919b"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Hip replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("a1e7fe58-fc4c-4f01-9a27-0d4a9f454ec6"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Meniscal inury treatment",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("207be4a1-1af6-484f-a85b-71f102e04fb1"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Rotator cuff repair",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("24bb231c-1c4a-4861-b7e7-2046cb9163a9"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Ankle ligaments repair",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("af80b42b-ec82-48c9-8bf3-e9d55a79d275"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Lumbar disectomy",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("b967e430-4bf9-44f2-a812-49921e8699e5"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Trigger finger",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("5dec11bf-ab57-480e-a8ff-283098553cb5"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Carpal tunnel syndrome",
                            surgeryTime = 0
                        });
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "b4b53ae2-a955-49ec-b3ae-64c1815a21b2",
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111"
                        },
                        new
                        {
                            Id = "ea59fe7d-0430-4b61-ad8b-5fc88bc6ec5b",
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222"
                        },
                        new
                        {
                            Id = "d8f702ea-e750-4127-bcec-2eb0253658aa",
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333"
                        },
                        new
                        {
                            Id = "a3e82e41-0f2c-4c27-808f-55f556b36fe7",
                            DateOfBirth = new DateOnly(1988, 5, 14),
                            Email = "patientD@hospital.com",
                            FullName = "David Oliveira",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000004",
                            PhoneNumber = "910555334"
                        },
                        new
                        {
                            Id = "efb29130-4e71-4531-8114-513784e5b258",
                            DateOfBirth = new DateOnly(1992, 8, 22),
                            Email = "patientE@hospital.com",
                            FullName = "Emma Sousa",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000005",
                            PhoneNumber = "910555335"
                        },
                        new
                        {
                            Id = "db35b2d9-23eb-4ae8-9885-47c9bd284e13",
                            DateOfBirth = new DateOnly(1985, 3, 10),
                            Email = "patientF@hospital.com",
                            FullName = "Felipe Costa",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000006",
                            PhoneNumber = "910555336"
                        },
                        new
                        {
                            Id = "e3a8744f-1fad-489e-8d2f-8c53c9f6e248",
                            DateOfBirth = new DateOnly(2000, 11, 2),
                            Email = "patientG@hospital.com",
                            FullName = "Gabriela Santos",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000007",
                            PhoneNumber = "910555337"
                        },
                        new
                        {
                            Id = "c63227e6-c822-44f7-9eee-17b8e4008480",
                            DateOfBirth = new DateOnly(1990, 7, 19),
                            Email = "patientH@hospital.com",
                            FullName = "Henrique Almeida",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000008",
                            PhoneNumber = "910555338"
                        },
                        new
                        {
                            Id = "26b4d341-349c-417f-bc14-6aa880ecc9d9",
                            DateOfBirth = new DateOnly(1994, 1, 15),
                            Email = "patientI@hospital.com",
                            FullName = "Isabel Pereira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000009",
                            PhoneNumber = "910555339"
                        },
                        new
                        {
                            Id = "617c1764-6cec-4c17-a21f-e1b0c899d70c",
                            DateOfBirth = new DateOnly(1982, 6, 8),
                            Email = "patientJ@hospital.com",
                            FullName = "João Lima",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000010",
                            PhoneNumber = "910555340"
                        },
                        new
                        {
                            Id = "3f2f6819-d22a-4148-bad5-770001f445ec",
                            DateOfBirth = new DateOnly(1996, 9, 25),
                            Email = "patientK@hospital.com",
                            FullName = "Karina Martins",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000011",
                            PhoneNumber = "910555341"
                        },
                        new
                        {
                            Id = "eb5cf5ad-ea08-4252-833b-a84d65ba650d",
                            DateOfBirth = new DateOnly(1987, 4, 12),
                            Email = "patientL@hospital.com",
                            FullName = "Lucas Rodrigues",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000012",
                            PhoneNumber = "910555342"
                        },
                        new
                        {
                            Id = "a2633647-7446-4d74-ad00-e569582a6af3",
                            DateOfBirth = new DateOnly(1993, 12, 5),
                            Email = "patientM@hospital.com",
                            FullName = "Marta Silva",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000013",
                            PhoneNumber = "910555343"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StaffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "6fb2a606-da21-492d-8b39-8029af120969",
                            Email = "pedro@hospital.com",
                            FullName = "Pedro Carvalho Oliveira Monteiro",
                            IdentityUsername = "pedro",
                            LicenseNumber = "f47ac10b-08cc-4372-a507-0e02b2d3d479",
                            PhoneNumber = "910555111",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "2b2bde2a-a50d-45fd-8efe-89421e1b9654",
                            Email = "andre@hospital.com",
                            FullName = "André de Sousa Ferreira",
                            IdentityUsername = "andre",
                            LicenseNumber = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PhoneNumber = "920555222",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "75c71629-c4d9-4519-9f5c-bfb38b5ce8fb",
                            Email = "tiago@hospital.com",
                            FullName = "Tiago Filipe Carvalho Nunes",
                            IdentityUsername = "tiago",
                            LicenseNumber = "f57ac10b-68cc-5372-a567-1e02b2c3d479",
                            PhoneNumber = "930555333",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "a40f31a7-b495-452a-83a5-ff87971ec13a",
                            Email = "nurse@hospital.com",
                            FullName = "Nurse One",
                            IdentityUsername = "nurse",
                            LicenseNumber = "n47ac10b-58cc-4372-a567-0e02b2c3d481",
                            PhoneNumber = "910555567",
                            StaffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedEquipment")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceSlots")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RoomStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("SurgeryRoom", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "f25f4cbb-b779-48b2-9721-4298093a5ec0",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[09:30,10:00];\"]",
                            Number = 200,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "90a45894-ca5a-46f2-8283-37bb646f7632",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "dc101983-1b79-4fe8-b5cb-301e5079dc08",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "a014e30c-027d-4d5b-bc36-285453869ea5",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "89a7f1dc-87c6-4fc6-8d20-13c8964b2d69",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "31eabf31-a424-4838-9876-546c0d1c6825",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3f13a22b-1cda-4c25-a747-a839b7abb4b6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67798e04-28b7-486b-8102-a49f81dac848",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMpz+5KvzWlCkNaAmyGz2s2yD3CpAFTa6a37iDtQsiq2pzHzOGlJ31C8P0ZrY3/3nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4db2f2cc-6ecc-42a8-9b49-7f8f106a1da6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "ea3f4e19-6db7-425c-b1fa-ecc2ceffec45",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd36d7c2-6c34-4851-a410-3631f262b2f9",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOXzfQKAPRxHJMBmHAqG/fSpwApNvo6OrZH4XDqWDMewRxMWfkiGkhK1gufeyyIryg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05d43e45-3197-408c-ba51-13fbd1c4a5d3",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "5fb7f252-6728-47b2-97a5-cb06486aebe6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f727d67-fcc5-45a9-83af-b23586201c14",
                            Email = "andre@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDRE@HOSPITAL.COM",
                            NormalizedUserName = "ANDRE",
                            PasswordHash = "AQAAAAIAAYagAAAAEKa9pX2eRmM7198j1mfjoqnT+GUVJdK3F5/pEZrCfrXMe5XwAx9+XKf5TEaN5x3xOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bf1d8db-02b7-4762-bbab-dc4c0f32fe44",
                            TwoFactorEnabled = false,
                            UserName = "andre"
                        },
                        new
                        {
                            Id = "7f734690-0c2f-418b-bede-1f834f57a44a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ee78a52-eacb-4a43-a548-6eeebf68b7f9",
                            Email = "tiago@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIAGO@HOSPITAL.COM",
                            NormalizedUserName = "TIAGO",
                            PasswordHash = "AQAAAAIAAYagAAAAEIRHYPDD4eubhPzIf0BqulRrmqb9Y/KeI+7RY9pzPlSKgQ6L4ZL8GEL0iUrxyii5QA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbdc0fa5-8243-4444-bb91-af66da356d05",
                            TwoFactorEnabled = false,
                            UserName = "tiago"
                        },
                        new
                        {
                            Id = "e9b9f5dd-25f8-44c4-9310-b53075814f7f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d045cc65-fd78-4b0e-8494-8732423735b3",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJcQNU1se5Bpfb76VrGcFQ37kc5Pa+wU4HuCATZqYp0aK57rvdJ5KO88N6NGbipQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d69efdf9-9dec-40a2-bc98-289ed51ab240",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "dd32bd2d-06e2-4b32-a6d0-ea297d289438",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43d5ce6c-5a6e-4a74-b651-8de55d5e7645",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAED/cLMQreTNNLR4SIWOKZUpePe4uF0rrRcL03fIPGA4soZUy5Cjr0/5QJ2v0NJUDKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac631918-e12b-4fec-9bbb-67029d3f6ee5",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "57a0c689-591e-41b4-80fe-12002b8c7fa6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70abaf47-ed62-46a3-a3e5-f46ecc6880f2",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAECH7LY0PgiaWNIrFVUx5+oZeszmXoh+7IIzRFHj5tYu9LVOhlsD7Htwjf9vfBgQE7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "339449f1-fa30-4b96-beed-3e66a05f1798",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3f13a22b-1cda-4c25-a747-a839b7abb4b6",
                            RoleId = "90a45894-ca5a-46f2-8283-37bb646f7632"
                        },
                        new
                        {
                            UserId = "ea3f4e19-6db7-425c-b1fa-ecc2ceffec45",
                            RoleId = "dc101983-1b79-4fe8-b5cb-301e5079dc08"
                        },
                        new
                        {
                            UserId = "5fb7f252-6728-47b2-97a5-cb06486aebe6",
                            RoleId = "dc101983-1b79-4fe8-b5cb-301e5079dc08"
                        },
                        new
                        {
                            UserId = "7f734690-0c2f-418b-bede-1f834f57a44a",
                            RoleId = "dc101983-1b79-4fe8-b5cb-301e5079dc08"
                        },
                        new
                        {
                            UserId = "e9b9f5dd-25f8-44c4-9310-b53075814f7f",
                            RoleId = "a014e30c-027d-4d5b-bc36-285453869ea5"
                        },
                        new
                        {
                            UserId = "dd32bd2d-06e2-4b32-a6d0-ea297d289438",
                            RoleId = "89a7f1dc-87c6-4fc6-8d20-13c8964b2d69"
                        },
                        new
                        {
                            UserId = "57a0c689-591e-41b4-80fe-12002b8c7fa6",
                            RoleId = "31eabf31-a424-4838-9876-546c0d1c6825"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("Backend.Domain.OperationRequests.OperationRequest", "OperationRequest")
                        .WithMany("Appointments")
                        .HasForeignKey("OperationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.SurgeryRooms.SurgeryRoom", "SurgeryRoom")
                        .WithMany("Appointments")
                        .HasForeignKey("SurgeryRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationRequest");

                    b.Navigation("SurgeryRoom");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("Backend.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("Backend.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
