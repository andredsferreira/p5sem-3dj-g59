// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("requestStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5b8327d-325b-499d-aea5-076734cef432"),
                            dateTime = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("0c4d43f6-7d19-4e92-9609-1b630e713661"),
                            patientId = "f05afd70-a2b2-4cdb-b716-9a4f902c35d7",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "3faa9aaf-5958-4b8c-b7cf-b730b381faa1"
                        },
                        new
                        {
                            Id = new Guid("b5230eb8-a865-4002-8444-b41dc887c8cd"),
                            dateTime = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("f97c9032-a554-4836-8279-20fa7fc50cb5"),
                            patientId = "776a0a7f-fe55-4656-8f3f-832aa82f0e16",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "3faa9aaf-5958-4b8c-b7cf-b730b381faa1"
                        },
                        new
                        {
                            Id = new Guid("1f98d9f6-a857-4740-92d7-a2cbd67790ae"),
                            dateTime = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("d5623d59-8ab9-4585-b25b-67a785fe0bdf"),
                            patientId = "8ae2bc7a-4047-4fa6-9c28-63250b11ea11",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "3faa9aaf-5958-4b8c-b7cf-b730b381faa1"
                        },
                        new
                        {
                            Id = new Guid("43574cd6-21f9-4b5d-87a6-c5fc5519ba77"),
                            dateTime = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("c258452a-fdb9-4631-8e42-c6a0f55328f1"),
                            patientId = "934c2b06-5273-4e55-b493-32be379fdbff",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "3faa9aaf-5958-4b8c-b7cf-b730b381faa1"
                        },
                        new
                        {
                            Id = new Guid("841271fc-42da-4ea4-bcaa-7497ec594f1d"),
                            dateTime = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("a4e65b61-bb88-4f00-b3db-6012f673f670"),
                            patientId = "9b3bc8c0-c1c8-48c6-ba0a-87d54d5ebedd",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "3faa9aaf-5958-4b8c-b7cf-b730b381faa1"
                        },
                        new
                        {
                            Id = new Guid("bf6f11d2-26fd-4315-aff5-00c3b0231bee"),
                            dateTime = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("193f7e79-db4f-4c0f-b9c2-a0cd8375ef2c"),
                            patientId = "434bd425-9598-4233-9d5d-d701c7e3dc86",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "3faa9aaf-5958-4b8c-b7cf-b730b381faa1"
                        },
                        new
                        {
                            Id = new Guid("0d42d567-7ad6-48e2-82ce-361a51b6f0d5"),
                            dateTime = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("a4e65b61-bb88-4f00-b3db-6012f673f670"),
                            patientId = "76e1138e-af45-49b8-9045-9714b57a12f6",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "52a883ca-9c58-41cf-a5b0-dc2e4224cf50"
                        },
                        new
                        {
                            Id = new Guid("89ec04e1-6112-47d1-9ff9-b7800a7062bb"),
                            dateTime = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("34f25021-5d81-49e4-b6a9-c32c7912fe70"),
                            patientId = "434bd425-9598-4233-9d5d-d701c7e3dc86",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "52a883ca-9c58-41cf-a5b0-dc2e4224cf50"
                        },
                        new
                        {
                            Id = new Guid("68c2d8fa-bd0b-4ea2-9d0c-5a4a8b79ec53"),
                            dateTime = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("193f7e79-db4f-4c0f-b9c2-a0cd8375ef2c"),
                            patientId = "0fb3e11d-9d0b-436c-9f21-246101405e33",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "52a883ca-9c58-41cf-a5b0-dc2e4224cf50"
                        },
                        new
                        {
                            Id = new Guid("edb37be8-9816-4d5b-8b42-1af41607a5d3"),
                            dateTime = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("9b13028b-a48a-4b46-9c47-647ed5998c49"),
                            patientId = "89ce250b-6958-4be1-bb32-9fa183ab0d6e",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "52a883ca-9c58-41cf-a5b0-dc2e4224cf50"
                        },
                        new
                        {
                            Id = new Guid("bb561efe-c62f-4610-b334-ecb648dd84fa"),
                            dateTime = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("649868fb-0b3b-44bb-a6bb-9944a2cc2361"),
                            patientId = "f556982b-b778-4def-b2a0-b42b24baf2f4",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "52a883ca-9c58-41cf-a5b0-dc2e4224cf50"
                        },
                        new
                        {
                            Id = new Guid("db596732-ef64-410b-a54f-85e434574949"),
                            dateTime = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("649868fb-0b3b-44bb-a6bb-9944a2cc2361"),
                            patientId = "f556982b-b778-4def-b2a0-b42b24baf2f4",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "7684bba1-f6a6-4c1b-8ceb-0f6a80b89d5a"
                        },
                        new
                        {
                            Id = new Guid("fab6aa4c-86fc-4f7f-ba11-dbf75a2a7ed0"),
                            dateTime = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("027588b8-6c0b-4acf-a9d4-2293f1439452"),
                            patientId = "e15b6d17-c89d-4942-a736-e735753d553d",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "7684bba1-f6a6-4c1b-8ceb-0f6a80b89d5a"
                        },
                        new
                        {
                            Id = new Guid("0f616726-5f24-49d7-a4f1-efddaac4daaf"),
                            dateTime = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("0c4d43f6-7d19-4e92-9609-1b630e713661"),
                            patientId = "ade041a0-29d0-4654-bd3c-1c53c4e68b79",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "7684bba1-f6a6-4c1b-8ceb-0f6a80b89d5a"
                        },
                        new
                        {
                            Id = new Guid("e420a69b-d8d4-41c2-a888-ebb313421465"),
                            dateTime = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("f97c9032-a554-4836-8279-20fa7fc50cb5"),
                            patientId = "75284377-cfe5-4190-9ec8-6a792763c976",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "7684bba1-f6a6-4c1b-8ceb-0f6a80b89d5a"
                        },
                        new
                        {
                            Id = new Guid("ed8143f9-0986-4cb3-8181-eee7108bbec6"),
                            dateTime = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("d5623d59-8ab9-4585-b25b-67a785fe0bdf"),
                            patientId = "9b3bc8c0-c1c8-48c6-ba0a-87d54d5ebedd",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "7684bba1-f6a6-4c1b-8ceb-0f6a80b89d5a"
                        },
                        new
                        {
                            Id = new Guid("a506699a-5131-4c97-8202-61041ddfa424"),
                            dateTime = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("c258452a-fdb9-4631-8e42-c6a0f55328f1"),
                            patientId = "f05afd70-a2b2-4cdb-b716-9a4f902c35d7",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "7684bba1-f6a6-4c1b-8ceb-0f6a80b89d5a"
                        });
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinAnesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinCirculatingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinDoctor")
                        .HasColumnType("int");

                    b.Property<int>("MinInstrumentingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinMedicalActionAssistant")
                        .HasColumnType("int");

                    b.Property<int>("MinNurseAnaesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinXRayTechnician")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c4d43f6-7d19-4e92-9609-1b630e713661"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "ACL reconstruction",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("f97c9032-a554-4836-8279-20fa7fc50cb5"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Knee replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("d5623d59-8ab9-4585-b25b-67a785fe0bdf"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Shoulder replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("c258452a-fdb9-4631-8e42-c6a0f55328f1"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Hip replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("a4e65b61-bb88-4f00-b3db-6012f673f670"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Meniscal inury treatment",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("34f25021-5d81-49e4-b6a9-c32c7912fe70"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Rotator cuff repair",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("193f7e79-db4f-4c0f-b9c2-a0cd8375ef2c"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Ankle ligaments repair",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("9b13028b-a48a-4b46-9c47-647ed5998c49"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Lumbar disectomy",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("649868fb-0b3b-44bb-a6bb-9944a2cc2361"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Trigger finger",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("027588b8-6c0b-4acf-a9d4-2293f1439452"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Carpal tunnel syndrome",
                            surgeryTime = 0
                        });
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "f05afd70-a2b2-4cdb-b716-9a4f902c35d7",
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111"
                        },
                        new
                        {
                            Id = "776a0a7f-fe55-4656-8f3f-832aa82f0e16",
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222"
                        },
                        new
                        {
                            Id = "8ae2bc7a-4047-4fa6-9c28-63250b11ea11",
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333"
                        },
                        new
                        {
                            Id = "934c2b06-5273-4e55-b493-32be379fdbff",
                            DateOfBirth = new DateOnly(1988, 5, 14),
                            Email = "patientD@hospital.com",
                            FullName = "David Oliveira",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000004",
                            PhoneNumber = "910555334"
                        },
                        new
                        {
                            Id = "76e1138e-af45-49b8-9045-9714b57a12f6",
                            DateOfBirth = new DateOnly(1992, 8, 22),
                            Email = "patientE@hospital.com",
                            FullName = "Emma Sousa",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000005",
                            PhoneNumber = "910555335"
                        },
                        new
                        {
                            Id = "434bd425-9598-4233-9d5d-d701c7e3dc86",
                            DateOfBirth = new DateOnly(1985, 3, 10),
                            Email = "patientF@hospital.com",
                            FullName = "Felipe Costa",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000006",
                            PhoneNumber = "910555336"
                        },
                        new
                        {
                            Id = "0fb3e11d-9d0b-436c-9f21-246101405e33",
                            DateOfBirth = new DateOnly(2000, 11, 2),
                            Email = "patientG@hospital.com",
                            FullName = "Gabriela Santos",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000007",
                            PhoneNumber = "910555337"
                        },
                        new
                        {
                            Id = "89ce250b-6958-4be1-bb32-9fa183ab0d6e",
                            DateOfBirth = new DateOnly(1990, 7, 19),
                            Email = "patientH@hospital.com",
                            FullName = "Henrique Almeida",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000008",
                            PhoneNumber = "910555338"
                        },
                        new
                        {
                            Id = "f556982b-b778-4def-b2a0-b42b24baf2f4",
                            DateOfBirth = new DateOnly(1994, 1, 15),
                            Email = "patientI@hospital.com",
                            FullName = "Isabel Pereira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000009",
                            PhoneNumber = "910555339"
                        },
                        new
                        {
                            Id = "e15b6d17-c89d-4942-a736-e735753d553d",
                            DateOfBirth = new DateOnly(1982, 6, 8),
                            Email = "patientJ@hospital.com",
                            FullName = "João Lima",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000010",
                            PhoneNumber = "910555340"
                        },
                        new
                        {
                            Id = "ade041a0-29d0-4654-bd3c-1c53c4e68b79",
                            DateOfBirth = new DateOnly(1996, 9, 25),
                            Email = "patientK@hospital.com",
                            FullName = "Karina Martins",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000011",
                            PhoneNumber = "910555341"
                        },
                        new
                        {
                            Id = "75284377-cfe5-4190-9ec8-6a792763c976",
                            DateOfBirth = new DateOnly(1987, 4, 12),
                            Email = "patientL@hospital.com",
                            FullName = "Lucas Rodrigues",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000012",
                            PhoneNumber = "910555342"
                        },
                        new
                        {
                            Id = "9b3bc8c0-c1c8-48c6-ba0a-87d54d5ebedd",
                            DateOfBirth = new DateOnly(1993, 12, 5),
                            Email = "patientM@hospital.com",
                            FullName = "Marta Silva",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000013",
                            PhoneNumber = "910555343"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StaffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "3faa9aaf-5958-4b8c-b7cf-b730b381faa1",
                            Email = "pedro@hospital.com",
                            FullName = "Pedro Carvalho Oliveira Monteiro",
                            IdentityUsername = "pedro",
                            LicenseNumber = "f47ac10b-08cc-4372-a507-0e02b2d3d479",
                            PhoneNumber = "910555111",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "52a883ca-9c58-41cf-a5b0-dc2e4224cf50",
                            Email = "andre@hospital.com",
                            FullName = "André de Sousa Ferreira",
                            IdentityUsername = "andre",
                            LicenseNumber = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PhoneNumber = "920555222",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "7684bba1-f6a6-4c1b-8ceb-0f6a80b89d5a",
                            Email = "tiago@hospital.com",
                            FullName = "Tiago Filipe Carvalho Nunes",
                            IdentityUsername = "tiago",
                            LicenseNumber = "f57ac10b-68cc-5372-a567-1e02b2c3d479",
                            PhoneNumber = "930555333",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "08849d66-77ec-4d2d-a561-a8f694c1cb21",
                            Email = "nurse@hospital.com",
                            FullName = "Nurse One",
                            IdentityUsername = "nurse",
                            LicenseNumber = "n47ac10b-58cc-4372-a567-0e02b2c3d481",
                            PhoneNumber = "910555567",
                            StaffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedEquipment")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceSlots")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RoomStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("SurgeryRoom", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "ce9668d8-a46a-42b7-a7c7-0004df9aa031",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[09:30,10:00];\"]",
                            Number = 200,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5f8f4e1a-f1d0-4271-bc63-93c8e7c32d27",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "8025f309-ff88-4697-90ff-918d19fdc185",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "6b9b1541-cc32-4b91-ba84-f2c433cb1665",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "edb5811a-0b2d-4aa4-bef1-a1744ba12db5",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "47963905-fd7b-480c-9bc7-8343b78958db",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a031e988-c76f-48b4-a045-b249fa33f8cc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1577612c-a812-4570-9181-6a99a856b254",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDEHAFSAhjuoXDNj9GSTfCQ9HoQRMxkaPcTK22UZRx6cpw3uygUGUWDQvlAt2dZPXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "253e511d-1e83-4b1c-8bfd-dc7994326897",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5d9e65fa-d651-4673-81b5-6cf10f4ec872",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f9815d6-97e5-4e27-91b4-d01afa938d3e",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAED6Bb9H/iPk+ZxtfxseqQDYkq38CNzRNJX3kfx6V7PhWdJWUPrzbKonJn+GCwwnqfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a76f6127-d7f8-4907-aa80-f3164f872350",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "33c7275c-5e4e-4fcb-b2d5-ce7d20c181cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03094051-b43c-4626-8e41-77e2a0536c00",
                            Email = "andre@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDRE@HOSPITAL.COM",
                            NormalizedUserName = "ANDRE",
                            PasswordHash = "AQAAAAIAAYagAAAAEHw+Wk6TQbkawwnmafoqtKNiFLvboC3wmE7tQCU21+gpCnxnERk4MEcO2gts2itj9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a077f12c-b20b-4805-81b7-79c6425056bb",
                            TwoFactorEnabled = false,
                            UserName = "andre"
                        },
                        new
                        {
                            Id = "919be094-987e-46d0-9ff5-2c2ef9be532a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99de1e37-4433-4683-9931-4064bd181e07",
                            Email = "tiago@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIAGO@HOSPITAL.COM",
                            NormalizedUserName = "TIAGO",
                            PasswordHash = "AQAAAAIAAYagAAAAEKtQ1qA39Om0FWAJGMZAedFb5TW1u9kHlSE//zBPgLAumv8GWMnjBDw3iazgIFv6mQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "212e42d3-b6ce-4753-9430-a9ff48b1104e",
                            TwoFactorEnabled = false,
                            UserName = "tiago"
                        },
                        new
                        {
                            Id = "0f8130b5-e1a9-41a2-b3ee-dba2ae1ace09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b74bfff-6729-4916-8805-cd0a0655c394",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEPxEb+HQJw1c2pxOUC8FeaDVde+ow4VznZ80cPVp0L+1sUsbJQAaGa0JJZYUpoJApQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bce9a04-b222-40d7-8f7b-6e71c3e0c73a",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "aa304386-f654-4ee3-95ec-e279921c983e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "489cb354-3b54-41a5-b355-eb9705e7e311",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAECRSef/0xFc54I8tsH7XjozTfpccbzS5UcZmlf37d+ytxcnZJ2uNxVwg99Nwy05cnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ac45263-4a0b-47cd-bf36-adbdb07a37b0",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "b53a3e3c-a633-446c-839c-e070407dc5b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9f35f26-e2bb-4dbc-8323-19833082bad0",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAECqkhEvRgw5jjAjCCAV50Xd3uyeCEI3VXuF4Y9W9A/PqLHJMuL5ZXof7R4tyAuQGuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0758f02-cd6a-46f0-ad65-297f40fa8335",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a031e988-c76f-48b4-a045-b249fa33f8cc",
                            RoleId = "5f8f4e1a-f1d0-4271-bc63-93c8e7c32d27"
                        },
                        new
                        {
                            UserId = "5d9e65fa-d651-4673-81b5-6cf10f4ec872",
                            RoleId = "8025f309-ff88-4697-90ff-918d19fdc185"
                        },
                        new
                        {
                            UserId = "33c7275c-5e4e-4fcb-b2d5-ce7d20c181cb",
                            RoleId = "8025f309-ff88-4697-90ff-918d19fdc185"
                        },
                        new
                        {
                            UserId = "919be094-987e-46d0-9ff5-2c2ef9be532a",
                            RoleId = "8025f309-ff88-4697-90ff-918d19fdc185"
                        },
                        new
                        {
                            UserId = "0f8130b5-e1a9-41a2-b3ee-dba2ae1ace09",
                            RoleId = "6b9b1541-cc32-4b91-ba84-f2c433cb1665"
                        },
                        new
                        {
                            UserId = "aa304386-f654-4ee3-95ec-e279921c983e",
                            RoleId = "edb5811a-0b2d-4aa4-bef1-a1744ba12db5"
                        },
                        new
                        {
                            UserId = "b53a3e3c-a633-446c-839c-e070407dc5b9",
                            RoleId = "47963905-fd7b-480c-9bc7-8343b78958db"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("Backend.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("Backend.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
