// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OperationRequestId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SurgeryRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OperationRequestId");

                    b.HasIndex("SurgeryRoomId");

                    b.ToTable("Appointment", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39c39779-e14c-4d0e-ae29-cf9517b2bdf5"),
                            AppointmentStatus = "Scheduled",
                            DateTime = "28/10/2024 10:30:00",
                            OperationRequestId = new Guid("2d466fc9-61f3-4287-ba34-24439189117b"),
                            SurgeryRoomId = "33534ed2-17ca-4125-9b20-94d091e4ebf3"
                        },
                        new
                        {
                            Id = new Guid("f71544be-bffd-4e84-870e-bb795d7f6d6d"),
                            AppointmentStatus = "Scheduled",
                            DateTime = "28/10/2024 18:30:00",
                            OperationRequestId = new Guid("e6712dd4-8f70-4ee2-bd5e-f141dae08b68"),
                            SurgeryRoomId = "1f7cbe49-eada-44ca-a23b-cdda602b8d98"
                        });
                });

            modelBuilder.Entity("Backend.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("requestStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d466fc9-61f3-4287-ba34-24439189117b"),
                            dateTime = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("96c0b229-7ff9-4be3-b959-d83a5df18c5c"),
                            patientId = "9dbebeb1-9d64-4d93-b0f8-28b6a0fb7bc7",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "6d7dc1b5-5fef-4479-acea-87d47778b1f7"
                        },
                        new
                        {
                            Id = new Guid("e6712dd4-8f70-4ee2-bd5e-f141dae08b68"),
                            dateTime = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b3f2d702-fdbc-42ff-b901-01c0939eb395"),
                            patientId = "04fd8d39-76fa-4247-90dd-9f2fc57bd8cf",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "6d7dc1b5-5fef-4479-acea-87d47778b1f7"
                        },
                        new
                        {
                            Id = new Guid("18230ff4-043d-44ad-9f1d-302c51dbe272"),
                            dateTime = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("3ec4921d-bc9b-402f-892d-9ce59f2feea4"),
                            patientId = "c2344203-7b1d-49ca-8c83-dae12e7821e9",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "6d7dc1b5-5fef-4479-acea-87d47778b1f7"
                        },
                        new
                        {
                            Id = new Guid("77755ad9-8825-4bab-a179-af7b9661ad2d"),
                            dateTime = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("8625fefa-3bd9-490b-a0b0-53269f1323f3"),
                            patientId = "36a5a53a-c9a8-430f-9aa5-70868129fb60",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "6d7dc1b5-5fef-4479-acea-87d47778b1f7"
                        },
                        new
                        {
                            Id = new Guid("c5c2cd30-eb46-4e90-94ec-7ba718be0f19"),
                            dateTime = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("26e9d7b7-f2ab-4e93-ac81-df15b573a8e6"),
                            patientId = "32402319-8fa8-42b5-94ef-1b5005a2d53b",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "6d7dc1b5-5fef-4479-acea-87d47778b1f7"
                        },
                        new
                        {
                            Id = new Guid("6f6d24f9-f2e5-4cf4-b57e-979e11c2f521"),
                            dateTime = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("2967f620-bfba-47b7-a521-f19fcfda604d"),
                            patientId = "f002256c-2a5f-4bfb-82b1-49aebfff2c60",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "6d7dc1b5-5fef-4479-acea-87d47778b1f7"
                        },
                        new
                        {
                            Id = new Guid("f1fd359a-0602-488a-8d21-02bbd2efd3d3"),
                            dateTime = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("26e9d7b7-f2ab-4e93-ac81-df15b573a8e6"),
                            patientId = "9f47ea14-ca1d-43a1-86fa-fe8eaa4b21f9",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "71ea4b8d-ef4e-42cc-8de4-e510916fc1a2"
                        },
                        new
                        {
                            Id = new Guid("f759bfa6-1d10-478c-b22f-6186f398e38a"),
                            dateTime = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("d5352b6e-d5c4-4000-ac32-f607988997ff"),
                            patientId = "f002256c-2a5f-4bfb-82b1-49aebfff2c60",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "71ea4b8d-ef4e-42cc-8de4-e510916fc1a2"
                        },
                        new
                        {
                            Id = new Guid("8afe31b7-60e7-485a-8acd-7aea277ab2ea"),
                            dateTime = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("2967f620-bfba-47b7-a521-f19fcfda604d"),
                            patientId = "cd1f850f-e8ad-4649-99fd-1ee5f7b6d065",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "71ea4b8d-ef4e-42cc-8de4-e510916fc1a2"
                        },
                        new
                        {
                            Id = new Guid("f059a64f-bc06-44d8-b069-1465e4e4c89b"),
                            dateTime = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("4e609331-9a9b-45e9-9873-815b29acd24d"),
                            patientId = "505e05ae-1369-4841-90b9-6da3e8c9cd60",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "71ea4b8d-ef4e-42cc-8de4-e510916fc1a2"
                        },
                        new
                        {
                            Id = new Guid("6a35081c-b13f-499d-91c6-80b92df77bf9"),
                            dateTime = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("f4f7addf-3048-4933-8897-075bf4ddfec3"),
                            patientId = "fb5aca4b-d588-498e-9979-2cda404bd2b9",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "71ea4b8d-ef4e-42cc-8de4-e510916fc1a2"
                        },
                        new
                        {
                            Id = new Guid("36088d99-a33d-4609-b9f8-b426225439d8"),
                            dateTime = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("f4f7addf-3048-4933-8897-075bf4ddfec3"),
                            patientId = "fb5aca4b-d588-498e-9979-2cda404bd2b9",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "bb1f83ca-30dc-4112-892c-5abc041ba9c3"
                        },
                        new
                        {
                            Id = new Guid("86039cce-5c73-4171-a6af-bcd246f6f729"),
                            dateTime = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("9dfc2c2e-30e6-4e9b-b21a-aaf0e1f0244c"),
                            patientId = "4479e604-534c-4c07-9770-49113b335ae3",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "bb1f83ca-30dc-4112-892c-5abc041ba9c3"
                        },
                        new
                        {
                            Id = new Guid("048c403f-c350-4c37-93ce-dc38eec659da"),
                            dateTime = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("96c0b229-7ff9-4be3-b959-d83a5df18c5c"),
                            patientId = "e9ee812f-9474-424e-a4fc-f2a8d31a2814",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "bb1f83ca-30dc-4112-892c-5abc041ba9c3"
                        },
                        new
                        {
                            Id = new Guid("bf7dab8a-d700-40eb-a1f1-3ea1a1cf8b07"),
                            dateTime = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b3f2d702-fdbc-42ff-b901-01c0939eb395"),
                            patientId = "03aaf60a-80ba-42b3-b644-ff46e53d83a3",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "bb1f83ca-30dc-4112-892c-5abc041ba9c3"
                        },
                        new
                        {
                            Id = new Guid("40a2a221-cf9d-48ee-a2e1-d586ece4286c"),
                            dateTime = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("3ec4921d-bc9b-402f-892d-9ce59f2feea4"),
                            patientId = "32402319-8fa8-42b5-94ef-1b5005a2d53b",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "bb1f83ca-30dc-4112-892c-5abc041ba9c3"
                        },
                        new
                        {
                            Id = new Guid("ef9c2c2f-5c34-487e-967f-c32c36a3a48b"),
                            dateTime = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("8625fefa-3bd9-490b-a0b0-53269f1323f3"),
                            patientId = "9dbebeb1-9d64-4d93-b0f8-28b6a0fb7bc7",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "bb1f83ca-30dc-4112-892c-5abc041ba9c3"
                        });
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinAnesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinCirculatingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinDoctor")
                        .HasColumnType("int");

                    b.Property<int>("MinInstrumentingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinMedicalActionAssistant")
                        .HasColumnType("int");

                    b.Property<int>("MinNurseAnaesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinXRayTechnician")
                        .HasColumnType("int");

                    b.Property<Guid?>("SpecializationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96c0b229-7ff9-4be3-b959-d83a5df18c5c"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 30,
                            name = "ACL reconstruction",
                            surgeryTime = 60
                        },
                        new
                        {
                            Id = new Guid("b3f2d702-fdbc-42ff-b901-01c0939eb395"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Knee replacement",
                            surgeryTime = 60
                        },
                        new
                        {
                            Id = new Guid("3ec4921d-bc9b-402f-892d-9ce59f2feea4"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Shoulder replacement",
                            surgeryTime = 90
                        },
                        new
                        {
                            Id = new Guid("8625fefa-3bd9-490b-a0b0-53269f1323f3"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Hip replacement",
                            surgeryTime = 75
                        },
                        new
                        {
                            Id = new Guid("26e9d7b7-f2ab-4e93-ac81-df15b573a8e6"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 20,
                            name = "Meniscal inury treatment",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("d5352b6e-d5c4-4000-ac32-f607988997ff"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 30,
                            name = "Rotator cuff repair",
                            surgeryTime = 80
                        },
                        new
                        {
                            Id = new Guid("2967f620-bfba-47b7-a521-f19fcfda604d"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 30,
                            cleaningTime = 20,
                            name = "Ankle ligaments repair",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("4e609331-9a9b-45e9-9873-815b29acd24d"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 20,
                            cleaningTime = 15,
                            name = "Lumbar disectomy",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("f4f7addf-3048-4933-8897-075bf4ddfec3"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 15,
                            cleaningTime = 15,
                            name = "Trigger finger",
                            surgeryTime = 10
                        },
                        new
                        {
                            Id = new Guid("9dfc2c2e-30e6-4e9b-b21a-aaf0e1f0244c"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 15,
                            cleaningTime = 15,
                            name = "Carpal tunnel syndrome",
                            surgeryTime = 10
                        });
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "9dbebeb1-9d64-4d93-b0f8-28b6a0fb7bc7",
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111",
                            UserEmail = "patientA@hospital.com"
                        },
                        new
                        {
                            Id = "04fd8d39-76fa-4247-90dd-9f2fc57bd8cf",
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222",
                            UserEmail = "patientB@hospital.com"
                        },
                        new
                        {
                            Id = "c2344203-7b1d-49ca-8c83-dae12e7821e9",
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333",
                            UserEmail = "patientC@hospital.com"
                        },
                        new
                        {
                            Id = "36a5a53a-c9a8-430f-9aa5-70868129fb60",
                            DateOfBirth = new DateOnly(1988, 5, 14),
                            Email = "patientD@hospital.com",
                            FullName = "David Oliveira",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000004",
                            PhoneNumber = "910555334",
                            UserEmail = "patientD@hospital.com"
                        },
                        new
                        {
                            Id = "9f47ea14-ca1d-43a1-86fa-fe8eaa4b21f9",
                            DateOfBirth = new DateOnly(1992, 8, 22),
                            Email = "patientE@hospital.com",
                            FullName = "Emma Sousa",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000005",
                            PhoneNumber = "910555335",
                            UserEmail = "patientE@hospital.com"
                        },
                        new
                        {
                            Id = "f002256c-2a5f-4bfb-82b1-49aebfff2c60",
                            DateOfBirth = new DateOnly(1985, 3, 10),
                            Email = "patientF@hospital.com",
                            FullName = "Felipe Costa",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000006",
                            PhoneNumber = "910555336",
                            UserEmail = "patientF@hospital.com"
                        },
                        new
                        {
                            Id = "cd1f850f-e8ad-4649-99fd-1ee5f7b6d065",
                            DateOfBirth = new DateOnly(2000, 11, 2),
                            Email = "patientG@hospital.com",
                            FullName = "Gabriela Santos",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000007",
                            PhoneNumber = "910555337",
                            UserEmail = "patientG@hospital.com"
                        },
                        new
                        {
                            Id = "505e05ae-1369-4841-90b9-6da3e8c9cd60",
                            DateOfBirth = new DateOnly(1990, 7, 19),
                            Email = "patientH@hospital.com",
                            FullName = "Henrique Almeida",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000008",
                            PhoneNumber = "910555338",
                            UserEmail = "patientH@hospital.com"
                        },
                        new
                        {
                            Id = "fb5aca4b-d588-498e-9979-2cda404bd2b9",
                            DateOfBirth = new DateOnly(1994, 1, 15),
                            Email = "patientI@hospital.com",
                            FullName = "Isabel Pereira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000009",
                            PhoneNumber = "910555339",
                            UserEmail = "patientI@hospital.com"
                        },
                        new
                        {
                            Id = "4479e604-534c-4c07-9770-49113b335ae3",
                            DateOfBirth = new DateOnly(1982, 6, 8),
                            Email = "patientJ@hospital.com",
                            FullName = "João Lima",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000010",
                            PhoneNumber = "910555340",
                            UserEmail = "patientJ@hospital.com"
                        },
                        new
                        {
                            Id = "e9ee812f-9474-424e-a4fc-f2a8d31a2814",
                            DateOfBirth = new DateOnly(1996, 9, 25),
                            Email = "patientK@hospital.com",
                            FullName = "Karina Martins",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000011",
                            PhoneNumber = "910555341",
                            UserEmail = "patientK@hospital.com"
                        },
                        new
                        {
                            Id = "03aaf60a-80ba-42b3-b644-ff46e53d83a3",
                            DateOfBirth = new DateOnly(1987, 4, 12),
                            Email = "patientL@hospital.com",
                            FullName = "Lucas Rodrigues",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000012",
                            PhoneNumber = "910555342",
                            UserEmail = "patientL@hospital.com"
                        },
                        new
                        {
                            Id = "32402319-8fa8-42b5-94ef-1b5005a2d53b",
                            DateOfBirth = new DateOnly(1993, 12, 5),
                            Email = "patientM@hospital.com",
                            FullName = "Marta Silva",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000013",
                            PhoneNumber = "910555343",
                            UserEmail = "patientM@hospital.com"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Specializations.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("codeSpec")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("designation")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("codeSpec")
                        .IsUnique();

                    b.HasIndex("designation")
                        .IsUnique();

                    b.ToTable("Specialization", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StaffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "6d7dc1b5-5fef-4479-acea-87d47778b1f7",
                            Email = "pedro@hospital.com",
                            FullName = "Pedro Carvalho Oliveira Monteiro",
                            IdentityUsername = "pedro",
                            LicenseNumber = "f47ac10b-08cc-4372-a507-0e02b2d3d479",
                            PhoneNumber = "910555111",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "71ea4b8d-ef4e-42cc-8de4-e510916fc1a2",
                            Email = "andre@hospital.com",
                            FullName = "André de Sousa Ferreira",
                            IdentityUsername = "andre",
                            LicenseNumber = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PhoneNumber = "920555222",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "bb1f83ca-30dc-4112-892c-5abc041ba9c3",
                            Email = "tiago@hospital.com",
                            FullName = "Tiago Filipe Carvalho Nunes",
                            IdentityUsername = "tiago",
                            LicenseNumber = "f57ac10b-68cc-5372-a567-1e02b2c3d479",
                            PhoneNumber = "930555333",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "e20a746d-7d1d-41a7-951e-497d5760d870",
                            Email = "nurse@hospital.com",
                            FullName = "Nurse One",
                            IdentityUsername = "nurse",
                            LicenseNumber = "n47ac10b-58cc-4372-a567-0e02b2c3d481",
                            PhoneNumber = "910555567",
                            StaffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedEquipment")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceSlots")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RoomStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("SurgeryRoom", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "33534ed2-17ca-4125-9b20-94d091e4ebf3",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[09:30,10:00];\"]",
                            Number = 200,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        },
                        new
                        {
                            Id = "1f7cbe49-eada-44ca-a23b-cdda602b8d98",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\",\"Table\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[12:30,13:00];\"]",
                            Number = 201,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f8761f8e-2bfb-4d91-9c3c-92fc5821dcb2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e351c5a6-a358-4e0d-af71-a878acfb09b2",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "3b7747fc-524c-4a63-a880-544a7a42f2a1",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "e318f83c-a723-4646-adb0-c279a4637ec3",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "201c551c-936c-4df5-8d21-8607ba31de80",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b2e64671-a7e4-4641-96d6-15fc13500475",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8749d3b-65e1-4e23-8756-24b47a722a03",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEK+kpMt3CVMsATB+8hYlkjT/g6WlBOYu6vwl7liis2X3dYmQFWHzw7QTImPrFefN/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b46d14f-dc37-466e-a3fd-a79be5035111",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "52e6d47b-a461-4cde-bd74-65641071705a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd223abb-2665-4d3c-8461-f132367c25b9",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEAAq4geUVA+6YeMi7l/ExFsS8UPXHraRs+13mxue7CEGaGIzBjqGfzHK401DHceIeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01a01df0-b9d9-43da-b6c3-1f506c3fab16",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "18aaf0ab-d700-4309-abc7-507d98576396",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4924e999-dc9f-4d42-acb2-e1a823469553",
                            Email = "andre@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDRE@HOSPITAL.COM",
                            NormalizedUserName = "ANDRE",
                            PasswordHash = "AQAAAAIAAYagAAAAEPdyQNWqIbVrKwHW8ZcabwK5BhsbRl6QkJuSAP0jRDEHQZxm8BhV2vgLoMxClsZmRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c43fdc9-5bad-4433-80b5-e0565f4f8f7e",
                            TwoFactorEnabled = false,
                            UserName = "andre"
                        },
                        new
                        {
                            Id = "371da52c-7891-4b77-935c-a1d94e23191f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c7ec5dd-47fa-4cd6-af21-e190d8d35f2b",
                            Email = "tiago@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIAGO@HOSPITAL.COM",
                            NormalizedUserName = "TIAGO",
                            PasswordHash = "AQAAAAIAAYagAAAAEDnYQCVyEzyvnkkT3Av3FHkE4O+XqxU5TnzULhdYOEeUxyImpcq3fB83i3+ZiRroQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1efadf7-3bea-4df1-ac9c-3497be38c509",
                            TwoFactorEnabled = false,
                            UserName = "tiago"
                        },
                        new
                        {
                            Id = "d4499801-ed1d-43e0-8acd-eb95c3a71a27",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5807542-04a2-4a4b-8005-c8af62c5efd3",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEJUbo/5U5/6/eaGywLQF62hUIfWYNVvTyn6rw6cbE7lub2hI8smzED7EofLYXcnMAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e427613a-9600-4af4-84da-29ef36b143bf",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "a4019fc0-b252-4467-a1d5-cc76061f303f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "befb7b89-5b34-4601-a18b-65d023c56787",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDyCSE8XaGhlHHD9UFOwhWnut4QByhUaciVE1Q9+v7txikXP4vFHCsMlgDw8AycbOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f5e965f-9b1e-4cd7-a550-30500c213ab3",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "d3fa477b-f920-4c0b-be79-fbac14782a5e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71a785bb-871c-48b0-a7d8-269e09ac3a0e",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEEy3H4wTzYsTjqTFvSK5neDFKPLt5jECQgXVUVb+kdUIIOsA2nHHccn90Tnoi0fI4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3500d96c-c295-4300-a6ca-887f1ba69fdc",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b2e64671-a7e4-4641-96d6-15fc13500475",
                            RoleId = "f8761f8e-2bfb-4d91-9c3c-92fc5821dcb2"
                        },
                        new
                        {
                            UserId = "52e6d47b-a461-4cde-bd74-65641071705a",
                            RoleId = "e351c5a6-a358-4e0d-af71-a878acfb09b2"
                        },
                        new
                        {
                            UserId = "18aaf0ab-d700-4309-abc7-507d98576396",
                            RoleId = "e351c5a6-a358-4e0d-af71-a878acfb09b2"
                        },
                        new
                        {
                            UserId = "371da52c-7891-4b77-935c-a1d94e23191f",
                            RoleId = "e351c5a6-a358-4e0d-af71-a878acfb09b2"
                        },
                        new
                        {
                            UserId = "d4499801-ed1d-43e0-8acd-eb95c3a71a27",
                            RoleId = "3b7747fc-524c-4a63-a880-544a7a42f2a1"
                        },
                        new
                        {
                            UserId = "a4019fc0-b252-4467-a1d5-cc76061f303f",
                            RoleId = "e318f83c-a723-4646-adb0-c279a4637ec3"
                        },
                        new
                        {
                            UserId = "d3fa477b-f920-4c0b-be79-fbac14782a5e",
                            RoleId = "201c551c-936c-4df5-8d21-8607ba31de80"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("Backend.Domain.OperationRequests.OperationRequest", "OperationRequest")
                        .WithMany("Appointments")
                        .HasForeignKey("OperationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.SurgeryRooms.SurgeryRoom", "SurgeryRoom")
                        .WithMany("Appointments")
                        .HasForeignKey("SurgeryRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationRequest");

                    b.Navigation("SurgeryRoom");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("Backend.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.HasOne("Backend.Domain.Specializations.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("Backend.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
