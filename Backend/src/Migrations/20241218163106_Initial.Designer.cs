// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241218163106_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OperationRequestId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SurgeryRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OperationRequestId");

                    b.HasIndex("SurgeryRoomId");

                    b.ToTable("Appointment", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d2c0d90-05fa-4b14-87c8-4a87c91fd0f7"),
                            AppointmentStatus = "Scheduled",
                            DateTime = "28/10/2024 10:30:00",
                            OperationRequestId = new Guid("db8ac34e-5746-4a4c-ba72-a338e86dc44b"),
                            SurgeryRoomId = "81bd757d-42b1-4ad0-8b05-0b316aecae77"
                        },
                        new
                        {
                            Id = new Guid("389d068a-3205-4105-af2b-f5c3062161c1"),
                            AppointmentStatus = "Scheduled",
                            DateTime = "28/10/2024 18:30:00",
                            OperationRequestId = new Guid("b742543f-6705-4340-a2c4-10188373d68b"),
                            SurgeryRoomId = "010accec-6f8b-4236-a3e2-850e88974277"
                        });
                });

            modelBuilder.Entity("Backend.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("requestStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db8ac34e-5746-4a4c-ba72-a338e86dc44b"),
                            dateTime = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("4c283450-3c38-49d9-b8c8-2b80fee19db0"),
                            patientId = "4616a8ef-375f-46f2-9202-c717f191d4c8",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "f47a78a5-097c-47c0-845c-73a386c3a2a1"
                        },
                        new
                        {
                            Id = new Guid("b742543f-6705-4340-a2c4-10188373d68b"),
                            dateTime = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("7f85666d-db84-4036-978e-38366ab9700f"),
                            patientId = "439dc01e-f8e9-49e9-bda8-93aac1470504",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "f47a78a5-097c-47c0-845c-73a386c3a2a1"
                        },
                        new
                        {
                            Id = new Guid("2d23efb2-e6ad-499d-81bd-50b14873b4e7"),
                            dateTime = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("d7d8efcf-b217-4954-8a4f-ffb986f09dd4"),
                            patientId = "7c088f64-3f05-417e-97b9-845f21c2e7cf",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "f47a78a5-097c-47c0-845c-73a386c3a2a1"
                        },
                        new
                        {
                            Id = new Guid("13a035e0-0b8a-457d-874a-49e2f666ea95"),
                            dateTime = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("e94e30e9-e0d8-4fb9-b77a-427f07b51ccd"),
                            patientId = "5f5646e8-2683-4d0c-9559-5c7f11e50c09",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "f47a78a5-097c-47c0-845c-73a386c3a2a1"
                        },
                        new
                        {
                            Id = new Guid("b3895213-657b-4eb8-9cd1-9e0a5ccbd9ba"),
                            dateTime = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("e7eb5e11-b0a2-4af7-87c1-086394e3c009"),
                            patientId = "6b6f7434-98fe-4c9f-85a7-9ec1c049be6b",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "f47a78a5-097c-47c0-845c-73a386c3a2a1"
                        },
                        new
                        {
                            Id = new Guid("1f1152b6-5a5e-408d-80c2-440995f8a29e"),
                            dateTime = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b1328746-c4fe-48c5-85a1-4d21d973c38f"),
                            patientId = "2f1d65d5-894c-43d7-8809-789aa8a5c7ac",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "f47a78a5-097c-47c0-845c-73a386c3a2a1"
                        },
                        new
                        {
                            Id = new Guid("431df31d-919a-4eec-9a11-884b42812ee8"),
                            dateTime = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("e7eb5e11-b0a2-4af7-87c1-086394e3c009"),
                            patientId = "497dcd8c-e193-4cfd-9aa5-6815eac9a61e",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "9e46915f-bf8f-4675-8b05-789417c2d05c"
                        },
                        new
                        {
                            Id = new Guid("8203c087-e620-4a8d-9d49-c0502a751d84"),
                            dateTime = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("8a582fb4-bff6-4343-b8ae-0cc398b65487"),
                            patientId = "2f1d65d5-894c-43d7-8809-789aa8a5c7ac",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "9e46915f-bf8f-4675-8b05-789417c2d05c"
                        },
                        new
                        {
                            Id = new Guid("507c9f46-a9e5-4bba-a560-e39031dd0dc4"),
                            dateTime = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b1328746-c4fe-48c5-85a1-4d21d973c38f"),
                            patientId = "556eb046-e678-4bac-ba60-2fa1faf41431",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "9e46915f-bf8f-4675-8b05-789417c2d05c"
                        },
                        new
                        {
                            Id = new Guid("f4c9a2f0-c167-479a-a72b-f36a0f184256"),
                            dateTime = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("016a502d-176d-44ea-a8c2-59489b7f331d"),
                            patientId = "fde759b0-94ab-4b86-ad0d-7a19be0cc443",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "9e46915f-bf8f-4675-8b05-789417c2d05c"
                        },
                        new
                        {
                            Id = new Guid("efe921cb-a158-4b27-a0aa-e9ae6c4a22cb"),
                            dateTime = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("7e5f03bc-5a3a-43c9-8480-3ea69e70decb"),
                            patientId = "8e68fe1c-d993-468d-81ad-6c66a2e7f8c3",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "9e46915f-bf8f-4675-8b05-789417c2d05c"
                        },
                        new
                        {
                            Id = new Guid("53a15117-5b1d-4341-8b2c-bf9c0502ab0e"),
                            dateTime = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("7e5f03bc-5a3a-43c9-8480-3ea69e70decb"),
                            patientId = "8e68fe1c-d993-468d-81ad-6c66a2e7f8c3",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "5542cd6c-1b8b-4d32-ad10-c6332403c3b6"
                        },
                        new
                        {
                            Id = new Guid("987688ef-8676-4e3d-a3af-a9578cfcb413"),
                            dateTime = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("9470f06b-6d57-435e-9803-57d9d825a575"),
                            patientId = "5d616ddb-d5da-4ac9-a06e-a9b2cc879aa7",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "5542cd6c-1b8b-4d32-ad10-c6332403c3b6"
                        },
                        new
                        {
                            Id = new Guid("112a1f66-8e3c-4130-8741-c4686d0c9c4b"),
                            dateTime = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("4c283450-3c38-49d9-b8c8-2b80fee19db0"),
                            patientId = "15f36b97-7a63-4cdc-91b6-2f03eaed8e81",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "5542cd6c-1b8b-4d32-ad10-c6332403c3b6"
                        },
                        new
                        {
                            Id = new Guid("2fcb8833-efc9-4887-8f82-3d0dd5274a83"),
                            dateTime = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("7f85666d-db84-4036-978e-38366ab9700f"),
                            patientId = "e931cfe4-f531-466b-a507-d14a209d70f0",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "5542cd6c-1b8b-4d32-ad10-c6332403c3b6"
                        },
                        new
                        {
                            Id = new Guid("b9d4334b-52d4-4e4e-a207-eca9e4e28a61"),
                            dateTime = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("d7d8efcf-b217-4954-8a4f-ffb986f09dd4"),
                            patientId = "6b6f7434-98fe-4c9f-85a7-9ec1c049be6b",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "5542cd6c-1b8b-4d32-ad10-c6332403c3b6"
                        },
                        new
                        {
                            Id = new Guid("edfcd32e-4592-45b0-b666-4d8396dc0d23"),
                            dateTime = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("e94e30e9-e0d8-4fb9-b77a-427f07b51ccd"),
                            patientId = "4616a8ef-375f-46f2-9202-c717f191d4c8",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "5542cd6c-1b8b-4d32-ad10-c6332403c3b6"
                        });
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinAnesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinCirculatingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinDoctor")
                        .HasColumnType("int");

                    b.Property<int>("MinInstrumentingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinMedicalActionAssistant")
                        .HasColumnType("int");

                    b.Property<int>("MinNurseAnaesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinXRayTechnician")
                        .HasColumnType("int");

                    b.Property<Guid?>("SpecializationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c283450-3c38-49d9-b8c8-2b80fee19db0"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 30,
                            name = "ACL reconstruction",
                            surgeryTime = 60
                        },
                        new
                        {
                            Id = new Guid("7f85666d-db84-4036-978e-38366ab9700f"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Knee replacement",
                            surgeryTime = 60
                        },
                        new
                        {
                            Id = new Guid("d7d8efcf-b217-4954-8a4f-ffb986f09dd4"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Shoulder replacement",
                            surgeryTime = 90
                        },
                        new
                        {
                            Id = new Guid("e94e30e9-e0d8-4fb9-b77a-427f07b51ccd"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Hip replacement",
                            surgeryTime = 75
                        },
                        new
                        {
                            Id = new Guid("e7eb5e11-b0a2-4af7-87c1-086394e3c009"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 20,
                            name = "Meniscal inury treatment",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("8a582fb4-bff6-4343-b8ae-0cc398b65487"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 30,
                            name = "Rotator cuff repair",
                            surgeryTime = 80
                        },
                        new
                        {
                            Id = new Guid("b1328746-c4fe-48c5-85a1-4d21d973c38f"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 30,
                            cleaningTime = 20,
                            name = "Ankle ligaments repair",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("016a502d-176d-44ea-a8c2-59489b7f331d"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 20,
                            cleaningTime = 15,
                            name = "Lumbar disectomy",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("7e5f03bc-5a3a-43c9-8480-3ea69e70decb"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 15,
                            cleaningTime = 15,
                            name = "Trigger finger",
                            surgeryTime = 10
                        },
                        new
                        {
                            Id = new Guid("9470f06b-6d57-435e-9803-57d9d825a575"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 15,
                            cleaningTime = 15,
                            name = "Carpal tunnel syndrome",
                            surgeryTime = 10
                        });
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "4616a8ef-375f-46f2-9202-c717f191d4c8",
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111",
                            UserEmail = "patientA@hospital.com"
                        },
                        new
                        {
                            Id = "439dc01e-f8e9-49e9-bda8-93aac1470504",
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222",
                            UserEmail = "patientB@hospital.com"
                        },
                        new
                        {
                            Id = "7c088f64-3f05-417e-97b9-845f21c2e7cf",
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333",
                            UserEmail = "patientC@hospital.com"
                        },
                        new
                        {
                            Id = "5f5646e8-2683-4d0c-9559-5c7f11e50c09",
                            DateOfBirth = new DateOnly(1988, 5, 14),
                            Email = "patientD@hospital.com",
                            FullName = "David Oliveira",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000004",
                            PhoneNumber = "910555334",
                            UserEmail = "patientD@hospital.com"
                        },
                        new
                        {
                            Id = "497dcd8c-e193-4cfd-9aa5-6815eac9a61e",
                            DateOfBirth = new DateOnly(1992, 8, 22),
                            Email = "patientE@hospital.com",
                            FullName = "Emma Sousa",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000005",
                            PhoneNumber = "910555335",
                            UserEmail = "patientE@hospital.com"
                        },
                        new
                        {
                            Id = "2f1d65d5-894c-43d7-8809-789aa8a5c7ac",
                            DateOfBirth = new DateOnly(1985, 3, 10),
                            Email = "patientF@hospital.com",
                            FullName = "Felipe Costa",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000006",
                            PhoneNumber = "910555336",
                            UserEmail = "patientF@hospital.com"
                        },
                        new
                        {
                            Id = "556eb046-e678-4bac-ba60-2fa1faf41431",
                            DateOfBirth = new DateOnly(2000, 11, 2),
                            Email = "patientG@hospital.com",
                            FullName = "Gabriela Santos",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000007",
                            PhoneNumber = "910555337",
                            UserEmail = "patientG@hospital.com"
                        },
                        new
                        {
                            Id = "fde759b0-94ab-4b86-ad0d-7a19be0cc443",
                            DateOfBirth = new DateOnly(1990, 7, 19),
                            Email = "patientH@hospital.com",
                            FullName = "Henrique Almeida",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000008",
                            PhoneNumber = "910555338",
                            UserEmail = "patientH@hospital.com"
                        },
                        new
                        {
                            Id = "8e68fe1c-d993-468d-81ad-6c66a2e7f8c3",
                            DateOfBirth = new DateOnly(1994, 1, 15),
                            Email = "patientI@hospital.com",
                            FullName = "Isabel Pereira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000009",
                            PhoneNumber = "910555339",
                            UserEmail = "patientI@hospital.com"
                        },
                        new
                        {
                            Id = "5d616ddb-d5da-4ac9-a06e-a9b2cc879aa7",
                            DateOfBirth = new DateOnly(1982, 6, 8),
                            Email = "patientJ@hospital.com",
                            FullName = "João Lima",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000010",
                            PhoneNumber = "910555340",
                            UserEmail = "patientJ@hospital.com"
                        },
                        new
                        {
                            Id = "15f36b97-7a63-4cdc-91b6-2f03eaed8e81",
                            DateOfBirth = new DateOnly(1996, 9, 25),
                            Email = "patientK@hospital.com",
                            FullName = "Karina Martins",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000011",
                            PhoneNumber = "910555341",
                            UserEmail = "patientK@hospital.com"
                        },
                        new
                        {
                            Id = "e931cfe4-f531-466b-a507-d14a209d70f0",
                            DateOfBirth = new DateOnly(1987, 4, 12),
                            Email = "patientL@hospital.com",
                            FullName = "Lucas Rodrigues",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000012",
                            PhoneNumber = "910555342",
                            UserEmail = "patientL@hospital.com"
                        },
                        new
                        {
                            Id = "6b6f7434-98fe-4c9f-85a7-9ec1c049be6b",
                            DateOfBirth = new DateOnly(1993, 12, 5),
                            Email = "patientM@hospital.com",
                            FullName = "Marta Silva",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000013",
                            PhoneNumber = "910555343",
                            UserEmail = "patientM@hospital.com"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Specializations.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("codeSpec")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("designation")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("codeSpec")
                        .IsUnique();

                    b.HasIndex("designation")
                        .IsUnique();

                    b.ToTable("Specialization", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StaffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "f47a78a5-097c-47c0-845c-73a386c3a2a1",
                            Email = "pedro@hospital.com",
                            FullName = "Pedro Carvalho Oliveira Monteiro",
                            IdentityUsername = "pedro",
                            LicenseNumber = "f47ac10b-08cc-4372-a507-0e02b2d3d479",
                            PhoneNumber = "910555111",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "9e46915f-bf8f-4675-8b05-789417c2d05c",
                            Email = "andre@hospital.com",
                            FullName = "André de Sousa Ferreira",
                            IdentityUsername = "andre",
                            LicenseNumber = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PhoneNumber = "920555222",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "5542cd6c-1b8b-4d32-ad10-c6332403c3b6",
                            Email = "tiago@hospital.com",
                            FullName = "Tiago Filipe Carvalho Nunes",
                            IdentityUsername = "tiago",
                            LicenseNumber = "f57ac10b-68cc-5372-a567-1e02b2c3d479",
                            PhoneNumber = "930555333",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "0dc8ad22-d134-47db-8c0f-ca861fbd9e90",
                            Email = "nurse@hospital.com",
                            FullName = "Nurse One",
                            IdentityUsername = "nurse",
                            LicenseNumber = "n47ac10b-58cc-4372-a567-0e02b2c3d481",
                            PhoneNumber = "910555567",
                            StaffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedEquipment")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceSlots")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RoomStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("SurgeryRoom", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "81bd757d-42b1-4ad0-8b05-0b316aecae77",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[09:30,10:00];\"]",
                            Number = 200,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        },
                        new
                        {
                            Id = "010accec-6f8b-4236-a3e2-850e88974277",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\",\"Table\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[12:30,13:00];\"]",
                            Number = 201,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bbf87d38-26e6-4705-a9be-bd484708283a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "dfb01c05-b040-4d21-8a5f-82bff894aaf1",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "571f2a9c-3aaf-4250-9a58-980506bed48c",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "61a3c51e-ab19-4294-ae45-4092c85e63eb",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "0c71dec1-f206-43b4-87c1-a045ea4d1633",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7d38bafb-20f4-4e1b-b883-f77fa975220c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a8a277e-b370-454b-8582-f0f32048b8a1",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMJhKt5AXa5v00m6m2vYDai2Bna2uqYS8vNjC9N1dCrHhJumsBbIYC8YBxp+EwHz1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1760ae6-a1dd-4ef0-bc9e-4022e4dfe7dd",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "860df055-835b-4ded-b14a-ec800201fbb0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "458ca9b8-4df3-42c2-a034-bf7a0562dc0b",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEJPs4+2VZ/qc+4hHS4Gv2sbyIcvsphgHNQL6E/ZSQ0sz0PNioA+BJUe/7Fpl3E+1Rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48e17e5a-23df-434e-8a92-bef811d0e6bd",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "3042772e-3552-4d96-93e8-2dfc039898f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f73573c5-9094-4f9f-bcff-3b89d55797a8",
                            Email = "andre@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDRE@HOSPITAL.COM",
                            NormalizedUserName = "ANDRE",
                            PasswordHash = "AQAAAAIAAYagAAAAEFKOo4/hwpua0QhOgJ80ZOh6qadlM4Ii+p9nL8oZ7pD5TJoqclays42ArGckzM7ijQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1af89133-e355-46d5-a52d-df1b1e118d07",
                            TwoFactorEnabled = false,
                            UserName = "andre"
                        },
                        new
                        {
                            Id = "1408c09d-ee0f-497d-86d9-ab00135e242c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb6c0a11-6ada-40ce-9111-22e263fbf21c",
                            Email = "tiago@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIAGO@HOSPITAL.COM",
                            NormalizedUserName = "TIAGO",
                            PasswordHash = "AQAAAAIAAYagAAAAEBeYw7kfZ/Jyiig5SDml5+TMLNwXCG3GKyEQPtqsNOpgFTK+nVOb3MJK9rYARdX9nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f980233a-3cf9-48eb-975c-05112a7ecfa6",
                            TwoFactorEnabled = false,
                            UserName = "tiago"
                        },
                        new
                        {
                            Id = "972ce454-319c-4cd5-bd84-fd73b971c7ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6bfeb372-8e76-4a8c-b1c6-506d7cfea7d8",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAELMqygRmnCKf567FuBC2GsKb+cZradn6RXlsPQn69aG47R1gzxvbCMTtCw9T3E18wA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a034c520-801e-446a-bcd1-44b17783ba8c",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "42c5c4b4-401f-48dc-ac9e-6d5a19d1ddc3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f8b9e75-e999-40d4-bbb5-a03d6bf2528c",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBN+ehjTtbihRVOd4BP66BZmq7tUZC61l3wl0BQzPHLpUmxT+e9B8/AKVaK1kiESnA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b832cff7-f657-45ce-bb45-a1e884d176cb",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "5cc33ae4-48e4-4290-9e24-5dada205d038",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "684b9f9a-8f38-41c5-9fca-112bd661a735",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEIRRbfIGSUkpeyyQ6QAIj55XEUj3cDgtVg83ZU9qxQGQEManAXt+EQ3z+tUz4SfleQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51d753f0-274a-4194-8c8a-1e45d73fb95d",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7d38bafb-20f4-4e1b-b883-f77fa975220c",
                            RoleId = "bbf87d38-26e6-4705-a9be-bd484708283a"
                        },
                        new
                        {
                            UserId = "860df055-835b-4ded-b14a-ec800201fbb0",
                            RoleId = "dfb01c05-b040-4d21-8a5f-82bff894aaf1"
                        },
                        new
                        {
                            UserId = "3042772e-3552-4d96-93e8-2dfc039898f5",
                            RoleId = "dfb01c05-b040-4d21-8a5f-82bff894aaf1"
                        },
                        new
                        {
                            UserId = "1408c09d-ee0f-497d-86d9-ab00135e242c",
                            RoleId = "dfb01c05-b040-4d21-8a5f-82bff894aaf1"
                        },
                        new
                        {
                            UserId = "972ce454-319c-4cd5-bd84-fd73b971c7ff",
                            RoleId = "571f2a9c-3aaf-4250-9a58-980506bed48c"
                        },
                        new
                        {
                            UserId = "42c5c4b4-401f-48dc-ac9e-6d5a19d1ddc3",
                            RoleId = "61a3c51e-ab19-4294-ae45-4092c85e63eb"
                        },
                        new
                        {
                            UserId = "5cc33ae4-48e4-4290-9e24-5dada205d038",
                            RoleId = "0c71dec1-f206-43b4-87c1-a045ea4d1633"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("Backend.Domain.OperationRequests.OperationRequest", "OperationRequest")
                        .WithMany("Appointments")
                        .HasForeignKey("OperationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.SurgeryRooms.SurgeryRoom", "SurgeryRoom")
                        .WithMany("Appointments")
                        .HasForeignKey("SurgeryRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationRequest");

                    b.Navigation("SurgeryRoom");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("Backend.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.HasOne("Backend.Domain.Specializations.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("Backend.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
