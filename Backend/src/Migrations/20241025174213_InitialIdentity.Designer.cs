// <auto-generated />
using System;
using DDDSample1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDDNetCore.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20241025174213_InitialIdentity")]
    partial class InitialIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "22255154-5ffa-49c4-a913-f8ad3f16bef3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1953b3fb-933e-44e4-821d-41caf0f0bf3e",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "2b30c94f-4eaf-410a-a8f8-11bf56318348",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "fc2234c7-0f9f-4b9b-a93f-4f106173b364",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "d6a53fda-800e-4d00-ad94-f8ca09b6c68e",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4bfb14f8-71c4-4532-b956-7c7b8398333e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2394e35-eb74-422a-adff-569c92487bb5",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEA6F6yfjixCbOGKlfHvp0aWy/0x8bdzijLz2fV7wLFAMY50lQi92/W1j85gcnEqmLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d565656-9e62-457e-b606-98ccb3a897e8",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "d39025fd-dd84-4f71-8a14-6535def42c02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "745a770b-a8f2-4a16-9224-b20f61907e1e",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEAjyMef3uddt0iwOug3GogGjhO0ZHJf42f6hGty9UlRw3o7ihBQRnjXQcKoWSWVp7w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df8991cb-2846-4576-9ecd-f2424a1385e2",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "0e722460-c87d-429e-a369-2e3983bd3126",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33f59cc3-d993-460f-8c35-7e09e9e385e3",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEMV4RS4gZSjxi/ZPsoVzoyqtK1vald3hyoyS2DnUu+U9S2yeF1AfC7zrp9FZIFZf8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b7536c8-50aa-4a5f-9ce5-8852c8d7d3fd",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "a6b71611-2207-4897-8568-75b1f143a0cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c97ce8d-ffd9-4b00-bdd4-3f716b5fa555",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEArJlDGVYto3Vghh7A7Amzm7OHCcg8I44rt5MTSdlnQpHkBbu/W0k2lQkBgRFxk61w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6944777a-a60d-41fc-bf05-e29cda332219",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "af71529f-505c-496b-8a20-0fd0fe8ca23a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00324f18-9b86-410f-9931-6d53c217096e",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAELmlhKzPwReFPcwkpZs5mz5BrKiXC3YKSqb+XOSdpFoN3LehSxvxkzzpRYIDTj3O8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d63701d1-5067-4740-bce4-224c14074246",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4bfb14f8-71c4-4532-b956-7c7b8398333e",
                            RoleId = "22255154-5ffa-49c4-a913-f8ad3f16bef3"
                        },
                        new
                        {
                            UserId = "d39025fd-dd84-4f71-8a14-6535def42c02",
                            RoleId = "1953b3fb-933e-44e4-821d-41caf0f0bf3e"
                        },
                        new
                        {
                            UserId = "0e722460-c87d-429e-a369-2e3983bd3126",
                            RoleId = "2b30c94f-4eaf-410a-a8f8-11bf56318348"
                        },
                        new
                        {
                            UserId = "a6b71611-2207-4897-8568-75b1f143a0cd",
                            RoleId = "fc2234c7-0f9f-4b9b-a93f-4f106173b364"
                        },
                        new
                        {
                            UserId = "af71529f-505c-496b-8a20-0fd0fe8ca23a",
                            RoleId = "d6a53fda-800e-4d00-ad94-f8ca09b6c68e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
