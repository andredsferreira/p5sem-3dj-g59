// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDDNetCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241106165515_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DDDSample1.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .HasColumnType("longtext");

                    b.Property<string>("requestStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e5e7179-22f4-4ddc-be7d-598eaa606641"),
                            dateTime = new DateTime(2024, 11, 6, 16, 55, 14, 839, DateTimeKind.Local).AddTicks(8796),
                            operationTypeId = new Guid("f2b93e03-d9c8-478a-a3d7-f38aaf2408d2"),
                            patientId = "3bfb6b52-e678-4547-83bd-9918fc1fa7df",
                            priority = "none",
                            requestStatus = "Pending",
                            staffId = "701ac94a-79a4-4fb2-861b-ef130cbd3b06"
                        },
                        new
                        {
                            Id = new Guid("d819de2c-25e6-4086-815b-c70a4afb840b"),
                            dateTime = new DateTime(2024, 11, 6, 16, 55, 14, 839, DateTimeKind.Local).AddTicks(8894),
                            operationTypeId = new Guid("01992df5-3739-4cb9-8248-f7862fc72e34"),
                            patientId = "0388b4d7-a356-4301-a62f-59981a6c1080",
                            priority = "top",
                            requestStatus = "Pending.",
                            staffId = "701ac94a-79a4-4fb2-861b-ef130cbd3b06"
                        });
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinAnesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinCirculatingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinDoctor")
                        .HasColumnType("int");

                    b.Property<int>("MinInstrumentingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinMedicalActionAssistant")
                        .HasColumnType("int");

                    b.Property<int>("MinNurseAnaesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinXRayTechnician")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2b93e03-d9c8-478a-a3d7-f38aaf2408d2"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "ACL Reconstruction",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("01992df5-3739-4cb9-8248-f7862fc72e34"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Knee Replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("41af98d1-fa9a-4a56-b5d3-c31a97bbe391"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Shoulder Replacement",
                            surgeryTime = 0
                        });
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "3bfb6b52-e678-4547-83bd-9918fc1fa7df",
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111"
                        },
                        new
                        {
                            Id = "0388b4d7-a356-4301-a62f-59981a6c1080",
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222"
                        },
                        new
                        {
                            Id = "d89731e7-8bce-4de4-a9c0-6ee5fc8b3350",
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333"
                        });
                });

            modelBuilder.Entity("DDDSample1.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StaffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "701ac94a-79a4-4fb2-861b-ef130cbd3b06",
                            IdentityUsername = "doctor",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "e5c0ad5b-49d4-4d0d-9bac-6ee9e0fb9ca7",
                            Email = "doctor2@hospital.com",
                            FullName = "Doctor 2",
                            IdentityUsername = "doctor2",
                            LicenseNumber = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PhoneNumber = "910555444",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "d9b6fdad-50b0-432f-9444-89d6124d37d4",
                            IdentityUsername = "nurese",
                            StaffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d039e601-65a1-41e9-9cd5-5e8da83e9360",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "465b9a95-62ad-43a9-b58c-16e25d402299",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "24a46aa1-7943-4a0e-8558-d91b6792e449",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "9c294937-34d3-4c82-bb76-89716ecce9cb",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "ca76d5e6-8852-4538-bd88-476561195ec6",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c4cbb86d-a844-49b7-a0bf-596a8a45c6c0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "992709ef-7a85-4783-a52f-96e7d60a4724",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDfXExFcw4VfNqsjFAxCPf64kYbejgVQGfmcW3Wkw/zpFpyfGWlTn5Zqzbtt8iHU7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6e3de53-3652-46f1-b682-28c85fdc12ee",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "0b7b3749-da05-4cb3-b9c9-7038fe754515",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91f177da-958b-4dd2-8cdf-f18ecd0fc4e6",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEPgOwtWqLvrm6YLQWUzJJFw5bXG5M+/KbfVEQHPB2RHSlXgodhmCWWFrHkGznCc7OA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52c730a0-86a1-4840-8044-c8564eeb7bd2",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "007def0a-baee-4db3-8956-7a43b52a5a93",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "676ab914-251b-45da-9927-f15ae2cb903a",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEF1RQL/yE6ANm9Lo4CRTOmGJG4GwFkeB+b4ulbHci7oU3PrdN0c8677tK4vBH7cYbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0ae4cb9-233d-4ed1-9531-efab98de11a8",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "a0985ab5-1374-405f-a758-0e5392f8f9d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d872e257-9d11-410e-ad78-ccee461fb564",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGaV8ulMdh+18SPRVESGq4TwganOuTa4yxD9oTe4Vugf6u7MkjOV8nMEnF0vUOj7Jw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95c695ee-314b-4fe2-a91e-1b335d879af7",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "07acbfb1-dfb4-48d3-9997-9915e4a80720",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58bf6b3b-4163-429d-a1e5-58c8734fe7b1",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAENS+Zr74F9f0l19A0bWNJIVYcLDfDH4CYpl9W52VA4FscDnLbQwV/4NPFytqzU9cXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9a48f40-f456-4d80-8a06-dc094aa618b2",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c4cbb86d-a844-49b7-a0bf-596a8a45c6c0",
                            RoleId = "d039e601-65a1-41e9-9cd5-5e8da83e9360"
                        },
                        new
                        {
                            UserId = "0b7b3749-da05-4cb3-b9c9-7038fe754515",
                            RoleId = "465b9a95-62ad-43a9-b58c-16e25d402299"
                        },
                        new
                        {
                            UserId = "007def0a-baee-4db3-8956-7a43b52a5a93",
                            RoleId = "24a46aa1-7943-4a0e-8558-d91b6792e449"
                        },
                        new
                        {
                            UserId = "a0985ab5-1374-405f-a758-0e5392f8f9d3",
                            RoleId = "9c294937-34d3-4c82-bb76-89716ecce9cb"
                        },
                        new
                        {
                            UserId = "07acbfb1-dfb4-48d3-9997-9915e4a80720",
                            RoleId = "ca76d5e6-8852-4538-bd88-476561195ec6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("DDDSample1.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDDSample1.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDDSample1.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("DDDSample1.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("DDDSample1.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
