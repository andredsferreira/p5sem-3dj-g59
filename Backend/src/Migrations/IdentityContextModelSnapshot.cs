// <auto-generated />
using System;
using DDDSample1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDDNetCore.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e05e36af-6686-4cca-ade3-bedb57f10f90",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0fb1266c-3780-4272-9616-08d62cd3ea19",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "ef3675db-c6a8-4a80-bc3e-ef6e8c5d8022",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "f2461eb1-ba93-48ab-b153-5d98238e125b",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "a59686d6-6650-4914-8b35-db51b5c708d5",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dc997215-afa0-4efb-8b2e-b8c1dc0291bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9782e33b-4a9f-412a-a9be-d8bea218e2fc",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKWK98JHWdG927xJfzrkFCoBagaWRUa7q33Kf7mj+Ud37oYHZ5yDJLerwzfD7jNuQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c32f07bd-f99d-47ea-aa83-e918c0a2696b",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "eb30782a-499a-49eb-9bd1-2a3cd7dcadfd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77d3c6bd-2185-41e4-9627-92eb42a5b510",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAECKxw8eRZEpFOnigec6e+dUzTGucnJspG1z2s8OsQ9VKfzFP62BZpCGudEN2eNDWJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9598dc28-c79b-4b9f-a352-6423c70e3690",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "6632cc4c-3f0f-401c-a6ca-ff7eb9156d58",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e390c4bd-cdc0-4ede-8adf-399241fcb547",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEAAnVmMPk5o1/PkEy8EWUDK9lWK8Ya6n0ir/d3wJcNYdlzndE72s8oirjqGoqPzLRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df804502-4f14-4297-b76e-0dfcb92364c3",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "a5f123db-3198-4c20-a36b-fec3269c786e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ddd8403-dfc7-4261-9ac2-bceb25a09df8",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGXTzDjp+RCHyuWHtQUwPqpj2nBfGnvPnKrmP021OCUHreIc0PTGZXBeyR5qjSZTxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "208a0eb4-043e-4326-a919-5f2f75d4de26",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "6a10a391-6be3-410e-934d-d443214e0d84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8ab459c-9af8-4865-a169-9f722461b7c0",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEAqBa1jZMSvhXAkR24rKQvoqTLXmIIICV06wXjzENmqgsV2wGVVR4DYy9Fux82Qn7A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "600e99ae-e134-4443-ae63-16a1d7cde998",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dc997215-afa0-4efb-8b2e-b8c1dc0291bc",
                            RoleId = "e05e36af-6686-4cca-ade3-bedb57f10f90"
                        },
                        new
                        {
                            UserId = "eb30782a-499a-49eb-9bd1-2a3cd7dcadfd",
                            RoleId = "0fb1266c-3780-4272-9616-08d62cd3ea19"
                        },
                        new
                        {
                            UserId = "6632cc4c-3f0f-401c-a6ca-ff7eb9156d58",
                            RoleId = "ef3675db-c6a8-4a80-bc3e-ef6e8c5d8022"
                        },
                        new
                        {
                            UserId = "a5f123db-3198-4c20-a36b-fec3269c786e",
                            RoleId = "f2461eb1-ba93-48ab-b153-5d98238e125b"
                        },
                        new
                        {
                            UserId = "6a10a391-6be3-410e-934d-d443214e0d84",
                            RoleId = "a59686d6-6650-4914-8b35-db51b5c708d5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
