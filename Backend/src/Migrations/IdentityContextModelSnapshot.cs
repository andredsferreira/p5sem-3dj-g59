// <auto-generated />
using System;
using DDDSample1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDDNetCore.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = "9027ccb2-7156-4803-bc3d-c5d61173a329",
=======
                            Id = "392dffbf-c3c4-4333-bfc1-42fee64386b3",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "1d555ac9-6e33-40c3-aa56-47aaba3c5a5d",
=======
                            Id = "b7ef8084-4795-41f2-be6f-6150f8d66c76",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "58c0520f-ebe5-4ee4-84a4-f0ad3eb64f74",
=======
                            Id = "1d7be275-9dff-4eb4-bba2-a750ee357a3e",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "58b08a57-d5e1-4500-b90b-52102d569f6c",
=======
                            Id = "014cf275-0880-41e2-822c-b39980346e36",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "bd85fe3b-1cd9-43df-8fc6-4ff27a21413b",
=======
                            Id = "91adb9ce-ef24-46a2-b5e7-40c40d3225a8",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = "fe5d35cf-0f76-4a9c-aaf8-c1323d76c1b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c739777d-bf6d-48be-b81e-305257986cf7",
=======
                            Id = "0080e433-bb95-44b5-a042-6b124e895094",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3654f272-2ec1-4eda-9aab-0b98fa6eb13e",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
<<<<<<< HEAD
                            PasswordHash = "AQAAAAIAAYagAAAAEM/WcKpeu2jVmGTqhdK1tB1fMOa/9v+Lci5WaelJ5/Z68XfYnxCh69Gq3nf+/s7ulA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "192144a8-efa1-48d0-8cd2-d32365742465",
=======
                            PasswordHash = "AQAAAAIAAYagAAAAEPuYWTik8wVGlYgoNbzhuaHM7tgvzozsKMbOBfhG9niEntq/8XchA0UAkWiNBEbspA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82dac689-60a5-4eed-a0ec-7a81374a41e2",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "f1039d04-82b8-4be0-948a-410733b0cf10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c60a603-24dc-4a28-90f9-baaa1024d176",
=======
                            Id = "4a0f0e00-9550-44a8-bc17-c998c1731e78",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38a412c8-91f3-45a0-902e-182c6a853654",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
<<<<<<< HEAD
                            PasswordHash = "AQAAAAIAAYagAAAAEJnXR3xno8tDIdvWP4Foef2Z8MfsubMM60bLIy6TpjezIusQGrkrMqHmnlI6WAfcNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f84d1155-7bc8-4a7d-8e0c-31f1f2de0bb0",
=======
                            PasswordHash = "AQAAAAIAAYagAAAAEHQ6eFFGOUsTwn+WG6QiprexBONFagmRgSlvsW9itZ2veJEGCGc5Z7uwdwYly/S87A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdf269a7-4103-455c-9575-0ba04c7bde56",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "a2bb422f-4f30-4c4c-8e87-893d1ccd6b56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3172a58c-23b8-4392-9844-60f2b79f5546",
=======
                            Id = "5e489457-486c-47ac-8a8d-0fa61b8f404a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75fa8951-64c5-402b-9063-030e7da7a983",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
<<<<<<< HEAD
                            PasswordHash = "AQAAAAIAAYagAAAAEDxtSa02790qSG1gpzk4pLBDCU5NkUbqp1lOPqueaa72eP2n6x4e87du/Lz16xVHQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0443327-af01-4672-8776-dfb1d7423c20",
=======
                            PasswordHash = "AQAAAAIAAYagAAAAEJ34iIxxSS2sMej0wkUtOPt6o63Yo65QfIB4+foKeBtIMyaPX/KSfPGZkQl+4rVndg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82e7a04b-a03a-4cf7-a88d-16d5b8109948",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "571646a2-b9ca-445d-b2d4-1b1df907e32c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "388b065a-8747-48c9-b387-6bf8091c5d74",
=======
                            Id = "e2ee989a-c854-4b36-ac89-06ebd641ffed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c1bd053-d303-474d-90a3-3ba3a0933779",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
<<<<<<< HEAD
                            PasswordHash = "AQAAAAIAAYagAAAAEPjSY4rJzNOtHXaQA+XWZnLHiBh2WEuq0IfP/13u7AiK9ZuO+wFESiL3EqAggjKflw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a3ac9132-cdb9-4bbe-aa5a-69fabf552fd8",
=======
                            PasswordHash = "AQAAAAIAAYagAAAAEGck6PkltZLWEq6ByOnFGoRKZJ1vMP3yrCLNUk35tyUyFnOnVFHB6X6AnMSb6OAYJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5da6cf7f-c6ee-4e52-a944-ef7c01de656f",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "faf660c3-4727-4204-9739-931ea5d14fd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8db9c441-94b5-4dbf-87e0-80dbd75b0915",
=======
                            Id = "974afc68-cd60-407c-8609-4b6d549422f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efc1c9fc-d23c-4746-ab6c-1205988a7568",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
<<<<<<< HEAD
                            PasswordHash = "AQAAAAIAAYagAAAAENEBrcOr4BR3TlwT+H7kkgPOtx3gBYkzuVCiDpkR2bLxHA7Ie7wJzpunNWOFsK6Fqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f486b8ce-ddef-4999-a7bf-0a008d121139",
=======
                            PasswordHash = "AQAAAAIAAYagAAAAEF31ZBP7100UT+EjenllwmshlilRfEpFTGTZORM8eMJ/3OfJKddGOewFMdkTFgHmOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d6ccb5b-afe0-45e5-9987-dc5c88360089",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            UserId = "fe5d35cf-0f76-4a9c-aaf8-c1323d76c1b8",
                            RoleId = "9027ccb2-7156-4803-bc3d-c5d61173a329"
                        },
                        new
                        {
                            UserId = "f1039d04-82b8-4be0-948a-410733b0cf10",
                            RoleId = "1d555ac9-6e33-40c3-aa56-47aaba3c5a5d"
                        },
                        new
                        {
                            UserId = "a2bb422f-4f30-4c4c-8e87-893d1ccd6b56",
                            RoleId = "58c0520f-ebe5-4ee4-84a4-f0ad3eb64f74"
                        },
                        new
                        {
                            UserId = "571646a2-b9ca-445d-b2d4-1b1df907e32c",
                            RoleId = "58b08a57-d5e1-4500-b90b-52102d569f6c"
                        },
                        new
                        {
                            UserId = "faf660c3-4727-4204-9739-931ea5d14fd7",
                            RoleId = "bd85fe3b-1cd9-43df-8fc6-4ff27a21413b"
=======
                            UserId = "0080e433-bb95-44b5-a042-6b124e895094",
                            RoleId = "392dffbf-c3c4-4333-bfc1-42fee64386b3"
                        },
                        new
                        {
                            UserId = "4a0f0e00-9550-44a8-bc17-c998c1731e78",
                            RoleId = "b7ef8084-4795-41f2-be6f-6150f8d66c76"
                        },
                        new
                        {
                            UserId = "5e489457-486c-47ac-8a8d-0fa61b8f404a",
                            RoleId = "1d7be275-9dff-4eb4-bba2-a750ee357a3e"
                        },
                        new
                        {
                            UserId = "e2ee989a-c854-4b36-ac89-06ebd641ffed",
                            RoleId = "014cf275-0880-41e2-822c-b39980346e36"
                        },
                        new
                        {
                            UserId = "974afc68-cd60-407c-8609-4b6d549422f0",
                            RoleId = "91adb9ce-ef24-46a2-b5e7-40c40d3225a8"
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
