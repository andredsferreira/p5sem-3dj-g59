// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241106230811_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("requestStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88e84fbc-5c7a-4cfd-982a-cdb7e7f174ec"),
                            dateTime = new DateTime(2024, 11, 6, 23, 8, 10, 570, DateTimeKind.Local).AddTicks(2159),
                            operationTypeId = new Guid("596797a7-dd7a-437d-a857-320b054b0286"),
                            patientId = "b3a0792e-5ded-4bf8-a2fc-bd6d2691a82b",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "eaf0835f-6f1c-4640-b862-b3b09beb1e04"
                        },
                        new
                        {
                            Id = new Guid("ccf2f77b-3bfa-4833-be6e-5a832c4f4db6"),
                            dateTime = new DateTime(2024, 11, 6, 23, 8, 10, 570, DateTimeKind.Local).AddTicks(2277),
                            operationTypeId = new Guid("42e1ca90-09f4-4778-9bd3-cfb9fe7fd1a2"),
                            patientId = "437a77e3-6463-4102-8f09-433ef2f3bb54",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "eaf0835f-6f1c-4640-b862-b3b09beb1e04"
                        });
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinAnesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinCirculatingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinDoctor")
                        .HasColumnType("int");

                    b.Property<int>("MinInstrumentingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinMedicalActionAssistant")
                        .HasColumnType("int");

                    b.Property<int>("MinNurseAnaesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinXRayTechnician")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("596797a7-dd7a-437d-a857-320b054b0286"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "ACL Reconstruction",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("42e1ca90-09f4-4778-9bd3-cfb9fe7fd1a2"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Knee Replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("988daacd-fdce-4cbe-80eb-4460f26bab5c"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Shoulder Replacement",
                            surgeryTime = 0
                        });
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "b3a0792e-5ded-4bf8-a2fc-bd6d2691a82b",
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111"
                        },
                        new
                        {
                            Id = "437a77e3-6463-4102-8f09-433ef2f3bb54",
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222"
                        },
                        new
                        {
                            Id = "9bd32206-6a29-4b39-89bd-489af5723d8b",
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StaffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "eaf0835f-6f1c-4640-b862-b3b09beb1e04",
                            IdentityUsername = "doctor",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "10b21118-a204-4c82-8082-151471aec858",
                            Email = "doctor2@hospital.com",
                            FullName = "Doctor 2",
                            IdentityUsername = "doctor2",
                            LicenseNumber = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PhoneNumber = "910555444",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "04bba7ff-07d0-4cfc-83c5-d620d929779c",
                            IdentityUsername = "nurse",
                            StaffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "84f271b1-c556-40b2-93e4-2801a170d691",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2eca3e76-d6b9-4c71-9763-8d779a413942",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "c76000f7-ade5-4d02-b798-48a21a737ceb",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "7e68d869-0e08-43f8-baed-b41652e8f481",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "c51efa52-f0eb-4360-ab1b-4a271cf2f3b2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "802e4522-f106-4653-88b3-393bbfb37444",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04a141db-d224-47fd-9351-6ab29786e96c",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMCzxSDrW6CUu/qsJfoy6xLaP/Uw2+bB6uGBg2yhdDBksRHnbaLz1n2QiMy9NKuQXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50b650d7-48d5-4fd0-8f9c-8ca8126cc9ba",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "12f9cb38-2334-4127-b1c9-6fab47336e80",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63a17deb-28c0-45f1-960c-e549625fae59",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEIV+9tc+/4C4aFrThLSEID2qtsil+B/hGXcPSqnA63834wrbcFbknAuhDEcMLnDFOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5de51c6-6f54-4565-99ee-99fa9c31796f",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "2470e6f0-cf24-4b27-90b3-19e50c93fd12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "703a3a43-7659-4be6-aa7b-6de7997ef077",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEKUdp3bYRBs61uwDmb23kY1W+p/MnFy6CS+wAbvB6ByItyLXGM7/AHcvDbotWguJxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a68f4e8f-0215-4ab0-888b-a2ca029a5464",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "fa40efff-6ee3-4e65-9bb1-a914cca5f6fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8726020f-bb1e-446e-869d-24e80f71cca9",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAELX2Kjwancf5vxUKH6J24+ciuX82MP8jJyzNDqHUpfwaJLigR8/R4Cq2sgJS3+dYbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1311341d-52eb-49ef-ac2c-e9ec71e0d6e1",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "910bafeb-4f9e-4fe5-8b4b-6d86685e33d9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58ede4f1-4153-40ed-8f4e-7f794df71b22",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEDpbhOqznDgR5eA87Nal9H3hq30xMf29BJGyMCT5bCShvb4uh8lPi3vU4ObRjmbGZg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b4b8f96-be64-4bf4-82be-8b005dfd4ea6",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "802e4522-f106-4653-88b3-393bbfb37444",
                            RoleId = "84f271b1-c556-40b2-93e4-2801a170d691"
                        },
                        new
                        {
                            UserId = "12f9cb38-2334-4127-b1c9-6fab47336e80",
                            RoleId = "2eca3e76-d6b9-4c71-9763-8d779a413942"
                        },
                        new
                        {
                            UserId = "2470e6f0-cf24-4b27-90b3-19e50c93fd12",
                            RoleId = "c76000f7-ade5-4d02-b798-48a21a737ceb"
                        },
                        new
                        {
                            UserId = "fa40efff-6ee3-4e65-9bb1-a914cca5f6fa",
                            RoleId = "7e68d869-0e08-43f8-baed-b41652e8f481"
                        },
                        new
                        {
                            UserId = "910bafeb-4f9e-4fe5-8b4b-6d86685e33d9",
                            RoleId = "c51efa52-f0eb-4360-ab1b-4a271cf2f3b2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("Backend.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("Backend.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
