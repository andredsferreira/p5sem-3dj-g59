// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241123175409_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("AppointmentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OperationRequestId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SurgeryRoomId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OperationRequestId");

                    b.HasIndex("SurgeryRoomId");

                    b.ToTable("Appointment", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bcb3307-5dc4-4bc3-ae93-fe8b9ed09412"),
                            AppointmentStatus = "Scheduled",
                            DateTime = "28/10/2024 10:30:00",
                            OperationRequestId = new Guid("408410c9-822a-4f3f-adbe-602797c2ca4a"),
                            SurgeryRoomId = "dc8b204b-bc8c-4dc0-a9f6-2cc340670850"
                        },
                        new
                        {
                            Id = new Guid("dd5fe3ce-bf6d-46a8-829c-a57625251ca3"),
                            AppointmentStatus = "Scheduled",
                            DateTime = "28/10/2024 18:30:00",
                            OperationRequestId = new Guid("5fe23ad0-8b90-43d6-b8d0-fe608d3f16ca"),
                            SurgeryRoomId = "843017e8-81bb-4596-acf3-58af0c0ed0f5"
                        });
                });

            modelBuilder.Entity("Backend.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("requestStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("408410c9-822a-4f3f-adbe-602797c2ca4a"),
                            dateTime = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("5be1eeff-86cf-43e2-ad23-57f2d126efcc"),
                            patientId = "1c585d44-c2a0-4f2f-84b2-613b7e05e818",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "eb6cf2af-3fab-498f-a39a-2c1359b5122c"
                        },
                        new
                        {
                            Id = new Guid("5fe23ad0-8b90-43d6-b8d0-fe608d3f16ca"),
                            dateTime = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("90ee776b-9352-4478-a88c-767bc523c99f"),
                            patientId = "5a454574-05fb-4ddc-95ca-d0751dbc9684",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "eb6cf2af-3fab-498f-a39a-2c1359b5122c"
                        },
                        new
                        {
                            Id = new Guid("1812fe31-0f9a-4530-9c2b-3403822a107b"),
                            dateTime = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("a589a07b-2b43-4d4c-a3bd-5769882c900f"),
                            patientId = "c7d49b15-07ce-4a1e-9334-64459ca55c04",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "eb6cf2af-3fab-498f-a39a-2c1359b5122c"
                        },
                        new
                        {
                            Id = new Guid("215b4ab7-9fa6-46c0-b629-889ce84e1677"),
                            dateTime = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("d135f6e0-1795-4f74-9208-d3191a979ea1"),
                            patientId = "c2cb59f0-6316-44d7-995a-fa53eeac91c7",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "eb6cf2af-3fab-498f-a39a-2c1359b5122c"
                        },
                        new
                        {
                            Id = new Guid("8a9d87d8-0b07-4e15-b24c-42b17e29852a"),
                            dateTime = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("3373623d-7493-453c-867e-07706d262b49"),
                            patientId = "04b31da2-6a8f-4e4b-b0b4-58ca52d480b7",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "eb6cf2af-3fab-498f-a39a-2c1359b5122c"
                        },
                        new
                        {
                            Id = new Guid("af836e19-3ae1-417f-943e-a60a9b7add31"),
                            dateTime = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("74e872a3-c709-4caf-8616-dbf5e25aa5c6"),
                            patientId = "d10a2e5b-2492-43a8-90fe-1c99bd8a1f7a",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "eb6cf2af-3fab-498f-a39a-2c1359b5122c"
                        },
                        new
                        {
                            Id = new Guid("f728510c-1382-4824-b6b2-2f528c5891aa"),
                            dateTime = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("3373623d-7493-453c-867e-07706d262b49"),
                            patientId = "d5ea5a3c-7599-49df-9881-563a478dba5b",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "f40ff59c-c1a5-4b0e-a6e2-d0e18bad2931"
                        },
                        new
                        {
                            Id = new Guid("b8c4f505-fc24-4d5f-be53-e84b4f3d4a32"),
                            dateTime = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("e79176e5-6ba6-44a9-8216-42516071d114"),
                            patientId = "d10a2e5b-2492-43a8-90fe-1c99bd8a1f7a",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "f40ff59c-c1a5-4b0e-a6e2-d0e18bad2931"
                        },
                        new
                        {
                            Id = new Guid("8a0e8888-3dc8-4b12-a135-46af707023b4"),
                            dateTime = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("74e872a3-c709-4caf-8616-dbf5e25aa5c6"),
                            patientId = "2dfb9c00-7649-4959-a358-2ab2e7dfd6dc",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "f40ff59c-c1a5-4b0e-a6e2-d0e18bad2931"
                        },
                        new
                        {
                            Id = new Guid("70717e71-c160-464c-899c-b4d7bc1c6ee1"),
                            dateTime = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("11569f84-f772-455b-ae9a-f3960d8ab301"),
                            patientId = "ccc82c0a-6b04-4607-aca9-3c40bb58f562",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "f40ff59c-c1a5-4b0e-a6e2-d0e18bad2931"
                        },
                        new
                        {
                            Id = new Guid("6eba10b2-53f5-402b-84b6-f976cbbaa933"),
                            dateTime = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("190de172-aa31-46fa-9071-89b7dcfa33eb"),
                            patientId = "91db188b-c49f-4d2f-a6ef-2baa22a14c7d",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "f40ff59c-c1a5-4b0e-a6e2-d0e18bad2931"
                        },
                        new
                        {
                            Id = new Guid("6cbe091a-a745-4240-a6ae-11daed8fef6a"),
                            dateTime = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("190de172-aa31-46fa-9071-89b7dcfa33eb"),
                            patientId = "91db188b-c49f-4d2f-a6ef-2baa22a14c7d",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "76f6f204-409d-4a96-b1db-8aa3ce0e3546"
                        },
                        new
                        {
                            Id = new Guid("13348ffb-be71-4824-b71d-95fabd758704"),
                            dateTime = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("34580b4b-dba7-405b-8d0e-3db226c7dce3"),
                            patientId = "1b2bb478-baed-4340-9fdc-550053e330fb",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "76f6f204-409d-4a96-b1db-8aa3ce0e3546"
                        },
                        new
                        {
                            Id = new Guid("d578615c-41c5-4b20-91ff-0636bc84b93c"),
                            dateTime = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("5be1eeff-86cf-43e2-ad23-57f2d126efcc"),
                            patientId = "61b6228e-8ed5-4971-8e98-876868cee92a",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "76f6f204-409d-4a96-b1db-8aa3ce0e3546"
                        },
                        new
                        {
                            Id = new Guid("b05eee89-cf26-4dc5-99ef-40fe7b489a96"),
                            dateTime = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("90ee776b-9352-4478-a88c-767bc523c99f"),
                            patientId = "fac1296d-f510-4253-a5ea-b5c21d6a1523",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "76f6f204-409d-4a96-b1db-8aa3ce0e3546"
                        },
                        new
                        {
                            Id = new Guid("262daf1a-1023-4ba7-9656-583ca628b690"),
                            dateTime = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("a589a07b-2b43-4d4c-a3bd-5769882c900f"),
                            patientId = "04b31da2-6a8f-4e4b-b0b4-58ca52d480b7",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "76f6f204-409d-4a96-b1db-8aa3ce0e3546"
                        },
                        new
                        {
                            Id = new Guid("add1b13e-9e22-4080-be2c-ffabe7fc648d"),
                            dateTime = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("d135f6e0-1795-4f74-9208-d3191a979ea1"),
                            patientId = "1c585d44-c2a0-4f2f-84b2-613b7e05e818",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "76f6f204-409d-4a96-b1db-8aa3ce0e3546"
                        });
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinAnesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinCirculatingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinDoctor")
                        .HasColumnType("int");

                    b.Property<int>("MinInstrumentingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinMedicalActionAssistant")
                        .HasColumnType("int");

                    b.Property<int>("MinNurseAnaesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinXRayTechnician")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5be1eeff-86cf-43e2-ad23-57f2d126efcc"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 30,
                            name = "ACL reconstruction",
                            surgeryTime = 60
                        },
                        new
                        {
                            Id = new Guid("90ee776b-9352-4478-a88c-767bc523c99f"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Knee replacement",
                            surgeryTime = 60
                        },
                        new
                        {
                            Id = new Guid("a589a07b-2b43-4d4c-a3bd-5769882c900f"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Shoulder replacement",
                            surgeryTime = 90
                        },
                        new
                        {
                            Id = new Guid("d135f6e0-1795-4f74-9208-d3191a979ea1"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 45,
                            name = "Hip replacement",
                            surgeryTime = 75
                        },
                        new
                        {
                            Id = new Guid("3373623d-7493-453c-867e-07706d262b49"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 20,
                            name = "Meniscal inury treatment",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("e79176e5-6ba6-44a9-8216-42516071d114"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 45,
                            cleaningTime = 30,
                            name = "Rotator cuff repair",
                            surgeryTime = 80
                        },
                        new
                        {
                            Id = new Guid("74e872a3-c709-4caf-8616-dbf5e25aa5c6"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 30,
                            cleaningTime = 20,
                            name = "Ankle ligaments repair",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("11569f84-f772-455b-ae9a-f3960d8ab301"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 20,
                            cleaningTime = 15,
                            name = "Lumbar disectomy",
                            surgeryTime = 45
                        },
                        new
                        {
                            Id = new Guid("190de172-aa31-46fa-9071-89b7dcfa33eb"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 15,
                            cleaningTime = 15,
                            name = "Trigger finger",
                            surgeryTime = 10
                        },
                        new
                        {
                            Id = new Guid("34580b4b-dba7-405b-8d0e-3db226c7dce3"),
                            MinAnesthetist = 0,
                            MinCirculatingNurse = 0,
                            MinDoctor = 0,
                            MinInstrumentingNurse = 0,
                            MinMedicalActionAssistant = 0,
                            MinNurseAnaesthetist = 0,
                            MinXRayTechnician = 0,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 15,
                            cleaningTime = 15,
                            name = "Carpal tunnel syndrome",
                            surgeryTime = 10
                        });
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "1c585d44-c2a0-4f2f-84b2-613b7e05e818",
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111"
                        },
                        new
                        {
                            Id = "5a454574-05fb-4ddc-95ca-d0751dbc9684",
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222"
                        },
                        new
                        {
                            Id = "c7d49b15-07ce-4a1e-9334-64459ca55c04",
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333"
                        },
                        new
                        {
                            Id = "c2cb59f0-6316-44d7-995a-fa53eeac91c7",
                            DateOfBirth = new DateOnly(1988, 5, 14),
                            Email = "patientD@hospital.com",
                            FullName = "David Oliveira",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000004",
                            PhoneNumber = "910555334"
                        },
                        new
                        {
                            Id = "d5ea5a3c-7599-49df-9881-563a478dba5b",
                            DateOfBirth = new DateOnly(1992, 8, 22),
                            Email = "patientE@hospital.com",
                            FullName = "Emma Sousa",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000005",
                            PhoneNumber = "910555335"
                        },
                        new
                        {
                            Id = "d10a2e5b-2492-43a8-90fe-1c99bd8a1f7a",
                            DateOfBirth = new DateOnly(1985, 3, 10),
                            Email = "patientF@hospital.com",
                            FullName = "Felipe Costa",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000006",
                            PhoneNumber = "910555336"
                        },
                        new
                        {
                            Id = "2dfb9c00-7649-4959-a358-2ab2e7dfd6dc",
                            DateOfBirth = new DateOnly(2000, 11, 2),
                            Email = "patientG@hospital.com",
                            FullName = "Gabriela Santos",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000007",
                            PhoneNumber = "910555337"
                        },
                        new
                        {
                            Id = "ccc82c0a-6b04-4607-aca9-3c40bb58f562",
                            DateOfBirth = new DateOnly(1990, 7, 19),
                            Email = "patientH@hospital.com",
                            FullName = "Henrique Almeida",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000008",
                            PhoneNumber = "910555338"
                        },
                        new
                        {
                            Id = "91db188b-c49f-4d2f-a6ef-2baa22a14c7d",
                            DateOfBirth = new DateOnly(1994, 1, 15),
                            Email = "patientI@hospital.com",
                            FullName = "Isabel Pereira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000009",
                            PhoneNumber = "910555339"
                        },
                        new
                        {
                            Id = "1b2bb478-baed-4340-9fdc-550053e330fb",
                            DateOfBirth = new DateOnly(1982, 6, 8),
                            Email = "patientJ@hospital.com",
                            FullName = "João Lima",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000010",
                            PhoneNumber = "910555340"
                        },
                        new
                        {
                            Id = "61b6228e-8ed5-4971-8e98-876868cee92a",
                            DateOfBirth = new DateOnly(1996, 9, 25),
                            Email = "patientK@hospital.com",
                            FullName = "Karina Martins",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000011",
                            PhoneNumber = "910555341"
                        },
                        new
                        {
                            Id = "fac1296d-f510-4253-a5ea-b5c21d6a1523",
                            DateOfBirth = new DateOnly(1987, 4, 12),
                            Email = "patientL@hospital.com",
                            FullName = "Lucas Rodrigues",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000012",
                            PhoneNumber = "910555342"
                        },
                        new
                        {
                            Id = "04b31da2-6a8f-4e4b-b0b4-58ca52d480b7",
                            DateOfBirth = new DateOnly(1993, 12, 5),
                            Email = "patientM@hospital.com",
                            FullName = "Marta Silva",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000013",
                            PhoneNumber = "910555343"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StaffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "eb6cf2af-3fab-498f-a39a-2c1359b5122c",
                            Email = "pedro@hospital.com",
                            FullName = "Pedro Carvalho Oliveira Monteiro",
                            IdentityUsername = "pedro",
                            LicenseNumber = "f47ac10b-08cc-4372-a507-0e02b2d3d479",
                            PhoneNumber = "910555111",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "f40ff59c-c1a5-4b0e-a6e2-d0e18bad2931",
                            Email = "andre@hospital.com",
                            FullName = "André de Sousa Ferreira",
                            IdentityUsername = "andre",
                            LicenseNumber = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PhoneNumber = "920555222",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "76f6f204-409d-4a96-b1db-8aa3ce0e3546",
                            Email = "tiago@hospital.com",
                            FullName = "Tiago Filipe Carvalho Nunes",
                            IdentityUsername = "tiago",
                            LicenseNumber = "f57ac10b-68cc-5372-a567-1e02b2c3d479",
                            PhoneNumber = "930555333",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "7c3f3690-7d7c-43d2-83be-7c0a13f436df",
                            Email = "nurse@hospital.com",
                            FullName = "Nurse One",
                            IdentityUsername = "nurse",
                            LicenseNumber = "n47ac10b-58cc-4372-a567-0e02b2c3d481",
                            PhoneNumber = "910555567",
                            StaffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedEquipment")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("MaintenanceSlots")
                        .IsRequired()
                        .HasColumnType("JSON");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("RoomStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("SurgeryRoom", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "dc8b204b-bc8c-4dc0-a9f6-2cc340670850",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[09:30,10:00];\"]",
                            Number = 200,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        },
                        new
                        {
                            Id = "843017e8-81bb-4596-acf3-58af0c0ed0f5",
                            AssignedEquipment = "[\"Scalpel\",\"Monitor\",\"Table\"]",
                            Capacity = 10,
                            MaintenanceSlots = "[\"28/10/2024=[12:30,13:00];\"]",
                            Number = 201,
                            RoomStatus = "Available",
                            RoomType = "OperatingRoom"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6165e57f-df8a-4dd2-a45a-c345d67f96d1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "02279d1c-4975-4f8b-8ff9-8ec403d38176",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "2a7737ca-0fb4-4ddb-ab30-01a596aae769",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "81221ae1-8f48-49d1-a709-f2052ceab30b",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "0c68aa9d-bda0-45d6-9f9a-879937a5bb78",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "608bff0e-0b3b-4ed6-9b79-1985e6933407",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07b8ec4a-fae4-4e9a-b7c3-64b350e78f16",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKqd138uxff9izBeAMLdkfgoeeCjtAnvl3I+tBTGiI+EpIqOrcKaIrAUfLN9IFOF7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45968c90-a335-424f-a33c-91657e5bdd60",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "7d5a6b27-c656-4d41-b6da-3dc70044a800",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3dccd9f-d93c-4682-b806-184cbf1555fb",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEFoiiHUAB5/+iS+6o5/WFZJL4+M02ZiMO2oEIj4aIEmLmEfQDS89xfeH9IJx84bxwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9984b80-1dd9-45ad-bad8-c6c60cecfb7b",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "ccc6bba8-16f2-404a-915f-2f09af15c440",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9cee1629-9c06-45a7-8138-173009a61e44",
                            Email = "andre@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDRE@HOSPITAL.COM",
                            NormalizedUserName = "ANDRE",
                            PasswordHash = "AQAAAAIAAYagAAAAENtSigLyyFnmL2xu5uJHljQBAVMjlRTJromofh/bk7uKh5nVYj+v0sFnHHpYt9Fnlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fefbd64b-6be9-4fde-8679-4b76bf861368",
                            TwoFactorEnabled = false,
                            UserName = "andre"
                        },
                        new
                        {
                            Id = "0de4af34-cafb-4343-94dd-2186a675cd77",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9183281b-8080-4449-a0ca-5d0fed155a23",
                            Email = "tiago@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIAGO@HOSPITAL.COM",
                            NormalizedUserName = "TIAGO",
                            PasswordHash = "AQAAAAIAAYagAAAAELpU7YZx1iFZ0vbmXSnUaL+pfEGovfzRntSEX5PbMukCZAEepj6Hno3efFl2X/LZlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f789fee-b80a-479f-bfb0-f8a206ef6f03",
                            TwoFactorEnabled = false,
                            UserName = "tiago"
                        },
                        new
                        {
                            Id = "939446d3-a0e6-4eaf-8168-522f2208e7d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d2131f3-9126-4a71-8cdc-8ee0da4d4451",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGfbSapvmoi7SJNABIHN41k3CrwNEEWkSBczvI05sqxBp5KhalwVSFavZarI+XqFFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8b0bf17-3b4c-4a33-ac8a-ec500b997f0c",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "e3dd1eb3-4cb4-4dce-90c9-4da467a5632c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "378f49c9-9c88-447d-833d-33b9b3038b65",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDbVmkV0BhBjz1cY3+Wdc8hA35IRWAsSUdH7VDcE23HaacQ+c2Uot7GjGnMRdhvIKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4223af48-27d4-4216-8cc2-4adde07b89d1",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "23df366d-e149-436c-af51-ea92f4f79bca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "871493d4-4118-43d8-8ce4-916d8909b1da",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEFqLooalaY/cIwt7ZfOkGzQl4+DggsiV7dPUS9zX14IKLYtmh+oqADDgEWDm+LnRWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "beeff01f-a688-407c-9550-3ca175bc80e5",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "608bff0e-0b3b-4ed6-9b79-1985e6933407",
                            RoleId = "6165e57f-df8a-4dd2-a45a-c345d67f96d1"
                        },
                        new
                        {
                            UserId = "7d5a6b27-c656-4d41-b6da-3dc70044a800",
                            RoleId = "02279d1c-4975-4f8b-8ff9-8ec403d38176"
                        },
                        new
                        {
                            UserId = "ccc6bba8-16f2-404a-915f-2f09af15c440",
                            RoleId = "02279d1c-4975-4f8b-8ff9-8ec403d38176"
                        },
                        new
                        {
                            UserId = "0de4af34-cafb-4343-94dd-2186a675cd77",
                            RoleId = "02279d1c-4975-4f8b-8ff9-8ec403d38176"
                        },
                        new
                        {
                            UserId = "939446d3-a0e6-4eaf-8168-522f2208e7d2",
                            RoleId = "2a7737ca-0fb4-4ddb-ab30-01a596aae769"
                        },
                        new
                        {
                            UserId = "e3dd1eb3-4cb4-4dce-90c9-4da467a5632c",
                            RoleId = "81221ae1-8f48-49d1-a709-f2052ceab30b"
                        },
                        new
                        {
                            UserId = "23df366d-e149-436c-af51-ea92f4f79bca",
                            RoleId = "0c68aa9d-bda0-45d6-9f9a-879937a5bb78"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("Backend.Domain.OperationRequests.OperationRequest", "OperationRequest")
                        .WithMany("Appointments")
                        .HasForeignKey("OperationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.SurgeryRooms.SurgeryRoom", "SurgeryRoom")
                        .WithMany("Appointments")
                        .HasForeignKey("SurgeryRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationRequest");

                    b.Navigation("SurgeryRoom");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("Backend.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("Backend.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.SurgeryRooms.SurgeryRoom", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
