// <auto-generated />
using System;
using Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241107144849_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("requestStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("staffId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4a4640c-cc6b-4ea4-bb96-6a4844a8de88"),
                            dateTime = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b699d934-e01d-45d5-b93a-bd1dcbb894da"),
                            patientId = "3796060f-fa45-4b7b-a949-28300638af40",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "99aa8f8f-cee0-458e-a8a1-9dac2d9dfde1"
                        },
                        new
                        {
                            Id = new Guid("b2dd9b21-b534-4482-a24d-b6064e07324b"),
                            dateTime = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("8c6e2f5c-dd74-4a99-92b0-efc0c69d1e2d"),
                            patientId = "e3d96cd0-0f4f-4c7b-8688-f502e050dbc4",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "99aa8f8f-cee0-458e-a8a1-9dac2d9dfde1"
                        },
                        new
                        {
                            Id = new Guid("f23b641c-6475-4c9c-8e84-db8553eebfc9"),
                            dateTime = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("e30bc099-8de0-4324-809b-51caedf0af2e"),
                            patientId = "cbd3b811-10f4-4b29-954b-09d09716fb26",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "99aa8f8f-cee0-458e-a8a1-9dac2d9dfde1"
                        },
                        new
                        {
                            Id = new Guid("637f6045-dd39-4656-b414-1aeb4d5f62d1"),
                            dateTime = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("a010f19a-63f0-4ae5-abfa-8c5d5d3d2420"),
                            patientId = "c19fafac-e0ad-4603-91a2-ecb786d07a0a",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "99aa8f8f-cee0-458e-a8a1-9dac2d9dfde1"
                        },
                        new
                        {
                            Id = new Guid("6e8b430d-4ec0-435d-a72e-4d196c1cf46e"),
                            dateTime = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("768f9fe7-13b1-4c7b-a76c-898eff8cfd63"),
                            patientId = "f294d339-2e13-4ee5-bef2-77d8f0d7f5b8",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "99aa8f8f-cee0-458e-a8a1-9dac2d9dfde1"
                        },
                        new
                        {
                            Id = new Guid("2f2b2c9e-7cdb-4855-a088-ab3b3ae721d3"),
                            dateTime = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("c8950bdf-3dbd-4877-921b-401f7bd6d3d9"),
                            patientId = "a679c1dc-8bca-46b0-8cbf-f85b9f4771bc",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "99aa8f8f-cee0-458e-a8a1-9dac2d9dfde1"
                        },
                        new
                        {
                            Id = new Guid("f0a217a7-146c-4136-aaee-4b561e982899"),
                            dateTime = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("768f9fe7-13b1-4c7b-a76c-898eff8cfd63"),
                            patientId = "a01503f6-fa1a-416f-bf5d-20c6d871e21a",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "a0f27a1b-1880-4e65-9290-232cd0293764"
                        },
                        new
                        {
                            Id = new Guid("02beb8aa-fb33-48c8-87f0-2437ed4c8ba5"),
                            dateTime = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("edcc5be9-658f-4338-80f9-9f7e093dc5ea"),
                            patientId = "a679c1dc-8bca-46b0-8cbf-f85b9f4771bc",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "a0f27a1b-1880-4e65-9290-232cd0293764"
                        },
                        new
                        {
                            Id = new Guid("90265510-ecd9-4a18-ae5b-369508bca05c"),
                            dateTime = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("c8950bdf-3dbd-4877-921b-401f7bd6d3d9"),
                            patientId = "0d836a06-980c-435a-8c9b-876dc2d4e824",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "a0f27a1b-1880-4e65-9290-232cd0293764"
                        },
                        new
                        {
                            Id = new Guid("f0cbca03-5267-4cc0-8d44-3c8a5124d0aa"),
                            dateTime = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("8a002308-afb6-4fe4-9717-489d9bd0387c"),
                            patientId = "23fe38e8-72b8-4977-8d95-97cf7bd356f2",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "a0f27a1b-1880-4e65-9290-232cd0293764"
                        },
                        new
                        {
                            Id = new Guid("c803f683-c7b4-4653-9d34-1282c2cac07b"),
                            dateTime = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("5aaf8bd5-8a97-40c8-962e-a5d6551f7ab7"),
                            patientId = "9270f807-f414-4aae-bf80-6a75deb4b35e",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "a0f27a1b-1880-4e65-9290-232cd0293764"
                        },
                        new
                        {
                            Id = new Guid("4ab9f686-10ff-4e96-980d-17edc64fd647"),
                            dateTime = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("5aaf8bd5-8a97-40c8-962e-a5d6551f7ab7"),
                            patientId = "9270f807-f414-4aae-bf80-6a75deb4b35e",
                            priority = "Elective",
                            requestStatus = "Pending",
                            staffId = "59979ffa-a40c-48e0-b76f-17721316301b"
                        },
                        new
                        {
                            Id = new Guid("73c76276-a872-4d8f-8a3b-419a9edd9775"),
                            dateTime = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("bcbcb982-c762-49de-81d3-221180e5b758"),
                            patientId = "a21744a1-6026-4cf5-972e-09fbeff6f68d",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "59979ffa-a40c-48e0-b76f-17721316301b"
                        },
                        new
                        {
                            Id = new Guid("ae9a2332-42de-446e-a7f8-95ac9b88ecf0"),
                            dateTime = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("b699d934-e01d-45d5-b93a-bd1dcbb894da"),
                            patientId = "169e899c-427d-445f-9e86-498cf3b93a97",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "59979ffa-a40c-48e0-b76f-17721316301b"
                        },
                        new
                        {
                            Id = new Guid("3215d214-6eb9-442e-ac92-b63ed358994d"),
                            dateTime = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("8c6e2f5c-dd74-4a99-92b0-efc0c69d1e2d"),
                            patientId = "843d9dab-6f18-4e53-a484-5c38deb9a9a1",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "59979ffa-a40c-48e0-b76f-17721316301b"
                        },
                        new
                        {
                            Id = new Guid("95bb8f3c-acb9-4c4f-b76c-cf50152686b3"),
                            dateTime = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("e30bc099-8de0-4324-809b-51caedf0af2e"),
                            patientId = "f294d339-2e13-4ee5-bef2-77d8f0d7f5b8",
                            priority = "Urgent",
                            requestStatus = "Pending",
                            staffId = "59979ffa-a40c-48e0-b76f-17721316301b"
                        },
                        new
                        {
                            Id = new Guid("d36e7ac2-4e98-4062-bcf6-ddad882a58b7"),
                            dateTime = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            operationTypeId = new Guid("a010f19a-63f0-4ae5-abfa-8c5d5d3d2420"),
                            patientId = "3796060f-fa45-4b7b-a949-28300638af40",
                            priority = "Emergency",
                            requestStatus = "Pending",
                            staffId = "59979ffa-a40c-48e0-b76f-17721316301b"
                        });
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<int>("MinAnesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinCirculatingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinDoctor")
                        .HasColumnType("int");

                    b.Property<int>("MinInstrumentingNurse")
                        .HasColumnType("int");

                    b.Property<int>("MinMedicalActionAssistant")
                        .HasColumnType("int");

                    b.Property<int>("MinNurseAnaesthetist")
                        .HasColumnType("int");

                    b.Property<int>("MinXRayTechnician")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b699d934-e01d-45d5-b93a-bd1dcbb894da"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "ACL reconstruction",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("8c6e2f5c-dd74-4a99-92b0-efc0c69d1e2d"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Knee replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("e30bc099-8de0-4324-809b-51caedf0af2e"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Shoulder replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("a010f19a-63f0-4ae5-abfa-8c5d5d3d2420"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Hip replacement",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("768f9fe7-13b1-4c7b-a76c-898eff8cfd63"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Meniscal inury treatment",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("edcc5be9-658f-4338-80f9-9f7e093dc5ea"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Rotator cuff repair",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("c8950bdf-3dbd-4877-921b-401f7bd6d3d9"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Ankle ligaments repair",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("8a002308-afb6-4fe4-9717-489d9bd0387c"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Lumbar disectomy",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("5aaf8bd5-8a97-40c8-962e-a5d6551f7ab7"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Trigger finger",
                            surgeryTime = 0
                        },
                        new
                        {
                            Id = new Guid("bcbcb982-c762-49de-81d3-221180e5b758"),
                            MinAnesthetist = 1,
                            MinCirculatingNurse = 1,
                            MinDoctor = 1,
                            MinInstrumentingNurse = 1,
                            MinMedicalActionAssistant = 1,
                            MinNurseAnaesthetist = 1,
                            MinXRayTechnician = 1,
                            Specialization = 0,
                            Status = "ACTIVE",
                            anaesthesiaTime = 0,
                            cleaningTime = 0,
                            name = "Carpal tunnel syndrome",
                            surgeryTime = 0
                        });
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "3796060f-fa45-4b7b-a949-28300638af40",
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111"
                        },
                        new
                        {
                            Id = "e3d96cd0-0f4f-4c7b-8688-f502e050dbc4",
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222"
                        },
                        new
                        {
                            Id = "cbd3b811-10f4-4b29-954b-09d09716fb26",
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333"
                        },
                        new
                        {
                            Id = "c19fafac-e0ad-4603-91a2-ecb786d07a0a",
                            DateOfBirth = new DateOnly(1988, 5, 14),
                            Email = "patientD@hospital.com",
                            FullName = "David Oliveira",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000004",
                            PhoneNumber = "910555334"
                        },
                        new
                        {
                            Id = "a01503f6-fa1a-416f-bf5d-20c6d871e21a",
                            DateOfBirth = new DateOnly(1992, 8, 22),
                            Email = "patientE@hospital.com",
                            FullName = "Emma Sousa",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000005",
                            PhoneNumber = "910555335"
                        },
                        new
                        {
                            Id = "a679c1dc-8bca-46b0-8cbf-f85b9f4771bc",
                            DateOfBirth = new DateOnly(1985, 3, 10),
                            Email = "patientF@hospital.com",
                            FullName = "Felipe Costa",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000006",
                            PhoneNumber = "910555336"
                        },
                        new
                        {
                            Id = "0d836a06-980c-435a-8c9b-876dc2d4e824",
                            DateOfBirth = new DateOnly(2000, 11, 2),
                            Email = "patientG@hospital.com",
                            FullName = "Gabriela Santos",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000007",
                            PhoneNumber = "910555337"
                        },
                        new
                        {
                            Id = "23fe38e8-72b8-4977-8d95-97cf7bd356f2",
                            DateOfBirth = new DateOnly(1990, 7, 19),
                            Email = "patientH@hospital.com",
                            FullName = "Henrique Almeida",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000008",
                            PhoneNumber = "910555338"
                        },
                        new
                        {
                            Id = "9270f807-f414-4aae-bf80-6a75deb4b35e",
                            DateOfBirth = new DateOnly(1994, 1, 15),
                            Email = "patientI@hospital.com",
                            FullName = "Isabel Pereira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000009",
                            PhoneNumber = "910555339"
                        },
                        new
                        {
                            Id = "a21744a1-6026-4cf5-972e-09fbeff6f68d",
                            DateOfBirth = new DateOnly(1982, 6, 8),
                            Email = "patientJ@hospital.com",
                            FullName = "João Lima",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000010",
                            PhoneNumber = "910555340"
                        },
                        new
                        {
                            Id = "169e899c-427d-445f-9e86-498cf3b93a97",
                            DateOfBirth = new DateOnly(1996, 9, 25),
                            Email = "patientK@hospital.com",
                            FullName = "Karina Martins",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000011",
                            PhoneNumber = "910555341"
                        },
                        new
                        {
                            Id = "843d9dab-6f18-4e53-a484-5c38deb9a9a1",
                            DateOfBirth = new DateOnly(1987, 4, 12),
                            Email = "patientL@hospital.com",
                            FullName = "Lucas Rodrigues",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000012",
                            PhoneNumber = "910555342"
                        },
                        new
                        {
                            Id = "f294d339-2e13-4ee5-bef2-77d8f0d7f5b8",
                            DateOfBirth = new DateOnly(1993, 12, 5),
                            Email = "patientM@hospital.com",
                            FullName = "Marta Silva",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000013",
                            PhoneNumber = "910555343"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("IdentityUsername")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("StaffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LicenseNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
                            Id = "99aa8f8f-cee0-458e-a8a1-9dac2d9dfde1",
                            Email = "pedro@hospital.com",
                            FullName = "Pedro Carvalho Oliveira Monteiro",
                            IdentityUsername = "pedro",
                            LicenseNumber = "f47ac10b-08cc-4372-a507-0e02b2d3d479",
                            PhoneNumber = "910555111",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "a0f27a1b-1880-4e65-9290-232cd0293764",
                            Email = "andre@hospital.com",
                            FullName = "André de Sousa Ferreira",
                            IdentityUsername = "andre",
                            LicenseNumber = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            PhoneNumber = "920555222",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "59979ffa-a40c-48e0-b76f-17721316301b",
                            Email = "tiago@hospital.com",
                            FullName = "Tiago Filipe Carvalho Nunes",
                            IdentityUsername = "tiago",
                            LicenseNumber = "f57ac10b-68cc-5372-a567-1e02b2c3d479",
                            PhoneNumber = "930555333",
                            StaffRole = "Doctor"
                        },
                        new
                        {
                            Id = "e40f33bd-2291-4bbc-8498-d9da548dbd07",
                            IdentityUsername = "nurse",
                            StaffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "92cc3254-c3f0-476c-826f-cfb3c62c3b58",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "26e73359-400e-4a14-93d6-896b129d4c6a",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "56a5fd77-7c2d-4f8d-9439-875a97137136",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "ff8daed2-266a-493b-b9f8-9fcefd4ea65d",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "846cb3f0-2ecf-4930-81a3-061353b6109c",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b8806f17-3174-4176-8cea-466237fa5a26",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e54ca693-0e63-4f2b-80ab-556343336ff6",
                            Email = "admin@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HOSPITAL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOLobkPYHHwjA6701Xg0NjfGtGpxWw2VK+B4ormTMdvuigoTV9CrV6CQCE0H2AjtgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0660e43-21df-4a52-9d08-dbb487514d59",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9ef7880d-7f18-471f-99b4-a442cc9a9c5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5dc0ad34-e6ac-4dc4-a597-c4e8ad101c4e",
                            Email = "doctor@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@HOSPITAL.COM",
                            NormalizedUserName = "DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEAF9lBTNa3YH3Q8bmH/FUvFfvdPFzNF2aRJ4RQd8HdJbZYdZ/j9wthmHUF/obL7Hug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "092476d1-447a-4f92-bfcd-d84b99bff213",
                            TwoFactorEnabled = false,
                            UserName = "doctor"
                        },
                        new
                        {
                            Id = "dece7fe3-b5b8-4e42-93d1-7b4a1545f26d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d553de6d-6783-45a8-9256-e3f51d9e9c97",
                            Email = "andre@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDRE@HOSPITAL.COM",
                            NormalizedUserName = "ANDRE",
                            PasswordHash = "AQAAAAIAAYagAAAAEAL+1Kb8FpqhxhOvJocnUZKOVVY7o2+HrED4Fb5IlwS2XhxKRAcALPLnMWiEb9Eztw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d29ad94a-8a46-4bdf-ac6b-955a76544343",
                            TwoFactorEnabled = false,
                            UserName = "andre"
                        },
                        new
                        {
                            Id = "1ec3bffe-447a-430c-862c-c4c4cad872a9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "489e9913-38ac-486d-8e6d-d809f94cd4a5",
                            Email = "tiago@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIAGO@HOSPITAL.COM",
                            NormalizedUserName = "TIAGO",
                            PasswordHash = "AQAAAAIAAYagAAAAEBL34F5uMZWVtvpVcjQXkqzJCycvXZHdpfsRKGiRn709D0aAuyL8wXnUU5c2F3bf2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3ff67abc-82c6-46c5-9605-cfdbc85b2d67",
                            TwoFactorEnabled = false,
                            UserName = "tiago"
                        },
                        new
                        {
                            Id = "fd5c5e08-ee8d-4983-9376-9d2144ef8921",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83d6dcf6-88e7-4c06-8fda-50c77f535a10",
                            Email = "nurse@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NURSE@HOSPITAL.COM",
                            NormalizedUserName = "NURSE",
                            PasswordHash = "AQAAAAIAAYagAAAAEIDLVptB2Slkb9G3bPof2pcICcUi3WNr2xMlq/Aukjzj6dPZSHEseErYQrdVp7bXXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4ba3124-51f6-48e1-874e-7fad3b17d72d",
                            TwoFactorEnabled = false,
                            UserName = "nurse"
                        },
                        new
                        {
                            Id = "301cd8fa-5824-40e4-bdb0-6e9b379327d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79a5c1da-48a8-4289-be21-c9ec717a07d1",
                            Email = "technician@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECHNICIAN@HOSPITAL.COM",
                            NormalizedUserName = "TECHNICIAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGNCwv+vfpg0VXUXoMfo2AF2VtLhm5Kn5H0oABKnuYHI+dE8nwzV7yJEEmc+kp/0rA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a972dba-14b6-424f-8ad3-827bd0289c08",
                            TwoFactorEnabled = false,
                            UserName = "technician"
                        },
                        new
                        {
                            Id = "a41ce558-f4e0-43f6-845a-047de269f12f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34c9f784-16ee-4a11-b6d6-976012508036",
                            Email = "patient@hospital.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@HOSPITAL.COM",
                            NormalizedUserName = "PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEOT8vUT4OnpdjJ0IzQRKLSZhXV/ZKEyeA+O3lFq//XqmYBLPHp6h9BJBsTV0TSOK4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af2f7fa0-f16d-4b33-9789-200c278b4c83",
                            TwoFactorEnabled = false,
                            UserName = "patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b8806f17-3174-4176-8cea-466237fa5a26",
                            RoleId = "92cc3254-c3f0-476c-826f-cfb3c62c3b58"
                        },
                        new
                        {
                            UserId = "9ef7880d-7f18-471f-99b4-a442cc9a9c5f",
                            RoleId = "26e73359-400e-4a14-93d6-896b129d4c6a"
                        },
                        new
                        {
                            UserId = "dece7fe3-b5b8-4e42-93d1-7b4a1545f26d",
                            RoleId = "26e73359-400e-4a14-93d6-896b129d4c6a"
                        },
                        new
                        {
                            UserId = "1ec3bffe-447a-430c-862c-c4c4cad872a9",
                            RoleId = "26e73359-400e-4a14-93d6-896b129d4c6a"
                        },
                        new
                        {
                            UserId = "fd5c5e08-ee8d-4983-9376-9d2144ef8921",
                            RoleId = "56a5fd77-7c2d-4f8d-9439-875a97137136"
                        },
                        new
                        {
                            UserId = "301cd8fa-5824-40e4-bdb0-6e9b379327d3",
                            RoleId = "ff8daed2-266a-493b-b9f8-9fcefd4ea65d"
                        },
                        new
                        {
                            UserId = "a41ce558-f4e0-43f6-845a-047de269f12f",
                            RoleId = "846cb3f0-2ecf-4930-81a3-061353b6109c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("Backend.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("Backend.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("Backend.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
