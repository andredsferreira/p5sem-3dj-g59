// <auto-generated />
using System;
using DDDSample1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DDDNetCore.Migrations.DDDSample1Db
{
    [DbContext(typeof(DDDSample1DbContext))]
    partial class DDDSample1DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DDDSample1.Domain.DomainLogs.DomainLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DomainLog", "projeto5sem");
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("operationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("patientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("priority")
                        .HasColumnType("longtext");

                    b.Property<int>("requestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("staffId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("operationTypeId");

                    b.HasIndex("patientId");

                    b.HasIndex("staffId");

                    b.ToTable("OperationRequest", "projeto5sem");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("833f1e35-870d-47e8-8387-28d035a2fe4d"),
                            dateTime = new DateTime(2024, 10, 25, 15, 7, 50, 227, DateTimeKind.Local).AddTicks(126),
                            operationTypeId = new Guid("ff54eada-7807-44b3-90a0-cca4ccf4da24"),
                            patientId = "039c9091-ffba-43d6-bf2a-67315542b27a",
                            priority = "none",
                            requestStatus = 0,
                            staffId = new Guid("70d8533f-9ef1-4ce4-b299-91c801cac84b")
                        },
                        new
                        {
                            Id = new Guid("ad555b66-fa0b-4efe-a0de-1a9fee2ca6a8"),
                            dateTime = new DateTime(2024, 10, 25, 15, 7, 50, 227, DateTimeKind.Local).AddTicks(245),
                            operationTypeId = new Guid("55dd4c33-908d-43be-a0a8-c03973fa24c7"),
                            patientId = "a20ecd1b-893b-49f3-ba1d-1545cd9dcb35",
                            priority = "top",
                            requestStatus = 0,
                            staffId = new Guid("70d8533f-9ef1-4ce4-b299-91c801cac84b")
=======
                            Id = new Guid("979caeaa-a869-4ea5-bd6c-3108e69d55dc"),
                            dateTime = new DateTime(2024, 10, 25, 16, 24, 37, 121, DateTimeKind.Local).AddTicks(1056),
                            operationTypeId = new Guid("f9989344-297f-45bd-8a08-6bf232ce07a1"),
                            patientId = "0434a2b8-c932-4309-bcf7-a44a67e52f2f",
                            priority = "none",
                            requestStatus = 0,
                            staffId = new Guid("e6a83076-f09c-417d-907b-b00f0b597f87")
                        },
                        new
                        {
                            Id = new Guid("710551b8-43ac-4bfe-9f55-966cdebc513b"),
                            dateTime = new DateTime(2024, 10, 25, 16, 24, 37, 121, DateTimeKind.Local).AddTicks(1159),
                            operationTypeId = new Guid("b414281b-482b-4047-bf3b-2dcc2a53190c"),
                            patientId = "673a29cc-6adf-41c5-acdc-c9c3fd4783d5",
                            priority = "top",
                            requestStatus = 0,
                            staffId = new Guid("e6a83076-f09c-417d-907b-b00f0b597f87")
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                        });
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("anaesthesiaTime")
                        .HasColumnType("int");

                    b.Property<int?>("cleaningTime")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("longtext");

                    b.Property<int?>("surgeryTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OperationType", "projeto5sem");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("ff54eada-7807-44b3-90a0-cca4ccf4da24"),
=======
                            Id = new Guid("f9989344-297f-45bd-8a08-6bf232ce07a1"),
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Status = "ACTIVE",
                            name = "ACL Reconstruction"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("55dd4c33-908d-43be-a0a8-c03973fa24c7"),
=======
                            Id = new Guid("b414281b-482b-4047-bf3b-2dcc2a53190c"),
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Status = "ACTIVE",
                            name = "Knee Replacement"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("575254b0-f54a-43f9-943a-0297c965da23"),
=======
                            Id = new Guid("c444d66b-b37b-44f1-a224-5b11d6e50238"),
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            Status = "ACTIVE",
                            name = "Shoulder Replacement"
                        });
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Allergy", b =>
                {
                    b.Property<Guid>("allergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PatientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("allergyName")
                        .HasColumnType("longtext");

                    b.HasKey("allergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MedicalRecordNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MedicalRecordNumber")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Patient", "projeto5sem");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = "039c9091-ffba-43d6-bf2a-67315542b27a",
=======
                            Id = "0434a2b8-c932-4309-bcf7-a44a67e52f2f",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            DateOfBirth = new DateOnly(2001, 10, 21),
                            Email = "patientA@hospital.com",
                            FullName = "João Camião",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000001",
                            PhoneNumber = "910555111"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "a20ecd1b-893b-49f3-ba1d-1545cd9dcb35",
=======
                            Id = "673a29cc-6adf-41c5-acdc-c9c3fd4783d5",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            DateOfBirth = new DateOnly(1998, 5, 14),
                            Email = "patientB@hospital.com",
                            FullName = "Bruno Silva",
                            Gender = "Male",
                            MedicalRecordNumber = "202410000002",
                            PhoneNumber = "910555222"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = "3f2d2f20-9b27-422d-9041-4b9d931cca76",
=======
                            Id = "b5d65c7b-f2c8-41c6-bafa-7ff6634a7240",
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            DateOfBirth = new DateOnly(1995, 12, 30),
                            Email = "patientC@hospital.com",
                            FullName = "Carla Ferreira",
                            Gender = "Female",
                            MedicalRecordNumber = "202410000003",
                            PhoneNumber = "910555333"
                        });
                });

            modelBuilder.Entity("DDDSample1.Domain.Staffs.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("staffRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Staff", "projeto5sem");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("70d8533f-9ef1-4ce4-b299-91c801cac84b"),
=======
                            Id = new Guid("e6a83076-f09c-417d-907b-b00f0b597f87"),
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            staffRole = "Doctor"
                        },
                        new
                        {
<<<<<<< HEAD
                            Id = new Guid("96d4fb26-d024-45fa-873e-a026877714e1"),
=======
                            Id = new Guid("00c6d80a-2001-414e-a8d6-875d206dfe24"),
>>>>>>> eb8668e (Correction of bugs in services, repositories, and dependency injection.)
                            staffRole = "Nurse"
                        });
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationRequests.OperationRequest", b =>
                {
                    b.HasOne("DDDSample1.Domain.OperationTypes.OperationType", "operationType")
                        .WithMany("OperationRequests")
                        .HasForeignKey("operationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDDSample1.Domain.Patients.Patient", "patient")
                        .WithMany("OperationRequests")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDDSample1.Domain.Staffs.Staff", "staff")
                        .WithMany("OperationRequests")
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("operationType");

                    b.Navigation("patient");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Allergy", b =>
                {
                    b.HasOne("DDDSample1.Domain.Patients.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DDDSample1.Domain.OperationTypes.OperationType", b =>
                {
                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("DDDSample1.Domain.Patients.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("OperationRequests");
                });

            modelBuilder.Entity("DDDSample1.Domain.Staffs.Staff", b =>
                {
                    b.Navigation("OperationRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
